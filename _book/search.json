[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducción al análisis de datos con R",
    "section": "",
    "text": "El objetivo de este ebook es brindarle al lector una introducción amigable pero completa sobre el manejo básico de R para el análisis de datos. Se presupone que quien utilice este manual desde el comienzo, no tenga conocimientos previos de R o de programación, por tanto, podrá utilizar esta herramienta para dar sus primeros pasos en el mundo de la ciencia de datos.\nTambién puede ser de utilidad para quien tenga experiencia, en la medida que cada tanto es de utilidad repasar los conceptos fundamentales, especialmente si hace tiempo que no realizamos determinada tarea, o si nunca se tuvo la necesidad de encarar determinado proyecto, por ejemplo, una Shiny App.\nEl libro se divide en X capítulos:\n\nIntroducción a R, funciones y RStudio\nImportación de datos\nEstructura de dataframes\nAnálisis de datos con R\nManipulación de datos\nVisualización\nInformes interactivos y automatizados\nDashboards interactivos\n\n\n\n\n\n\n\n\n\nSoy un analista de datos con experiencia en proyectos de analytics y machine learning aplicado a negocios. Actualmente me desempeño como analista de datos senior en el Instituto Nacional de Estadística y he colaborado en el desarrollo de modelos predictivos para la consultora BCS y en la elaboración de dashboards como consultor independiente. He sido docente de Python, R y Power BI en Instituto CPE durante cuatro años, donde también me desempeño como coordinador de proyectos. Finalmente, también fui docente de desarrollo web para Plan Ceibal."
  },
  {
    "objectID": "chapters/intro.html",
    "href": "chapters/intro.html",
    "title": "1  Introducción",
    "section": "",
    "text": "Para ver más sobre la relación de R y Python ir a este artículo.↩︎\nVer artículo: La santa trinidad del análisis de datos↩︎"
  },
  {
    "objectID": "chapters/import.html",
    "href": "chapters/import.html",
    "title": "2  Importación de datos",
    "section": "",
    "text": "Cuando trabajamos con archivos de texto plano, lo mejor que podemos hacer cuando pensamos en importarlo, es abrirlo con un bloc de notas (en la medida que el tamaño lo permita).\nLa función más elemental para importar archivos de texto plano es read.table. Esta función tiene la particularidad que prácticamente no toma ningun valor por defecto en sus parámetros y hay que rellenarlos todos de modo de generar una importación.\n\ndata <- read.table(\"../data/courseid_3282_participants.csv\")\ndata\n\nLa sentencia ejecutada anteriormente da el siguiente error:\n\nError in scan(file = file, what = what, sep = sep, quote = quote, dec = dec, : line 2 did not have 3 elements\n\nEsto ocurre porque read.table no sabe qué hacer en el caso de que una fila no contenga el mismo número de elementos que el resto. Para solucionar esto podemos agregar el parámetro que lo aclare.\n\ndata <- read.table(\"../data/courseid_3282_participants.csv\", fill = NA)\n\n\n\n\n\n\nV1\nV2\nV3\n\n\n\n\nNombre,Apellido(s),“Dirección\nde\ncorreo”\n\n\nCECILIA,CARPENA,mcarpena@msp.gub.uy\n\n\n\n\nMarines,FIGUEROA,mfigueroa@msp.gub.uy\n\n\n\n\nLUCA,AICARDI,maicardi@msp.gub.uy\n\n\n\n\nMARCELA,CASTRO,mfcastro@msp.gub.uy\n\n\n\n\nMARIA,MORATORIO,xmoratorio@msp.gub.uy\n\n\n\n\n\n\n\nTenemos la tabla! Aunque, realmente no es lo que esperábamos. Para empezar, los nombres de las columnas no son correctos. Parece ser que read.table por defecto no se da cuenta que la primera fila corresponde a los encabezados de la tabla. Vamos a tener que aclarárselo también.\n\ndata <- read.table(\n  file = \"../data/courseid_3282_participants.csv\", \n  fill = NA,\n  header = TRUE\n)\n\n\n\n\n\n\nNombre.Apellido.s…Dirección\nde\ncorreo.\n\n\n\n\nCECILIA,CARPENA,mcarpena@msp.gub.uy\nNA\nNA\n\n\nMarines,FIGUEROA,mfigueroa@msp.gub.uy\nNA\nNA\n\n\nLUCA,AICARDI,maicardi@msp.gub.uy\nNA\nNA\n\n\nMARCELA,CASTRO,mfcastro@msp.gub.uy\nNA\nNA\n\n\nMARIA,MORATORIO,xmoratorio@msp.gub.uy\nNA\nNA\n\n\nDaniel,BLANC,dblanc@ine.gub.uy\nNA\nNA\n\n\n\n\n\nCorregimos los encabezados! Pero aún parece que hay problemas: notoriamente esta tabla debería tener tres columnas: nombre, apellido y dirección de correo. Pero esto no ocurre.\nEl problema radica en que read.table toma por defecto que el separador de los datos es un espacio en blanco. Es por esto que dirección de correo está separado como si fueran tres columnas. Debemos especificarle cuál es el separador correcto: la coma.\n\ndata <- read.table(\n  file = \"../data/courseid_3282_participants.csv\", \n  fill = NA,\n  header = TRUE,\n  sep = \",\"\n)\n\n\n\n\n\n\nNombre\nApellido.s.\nDirección.de.correo\n\n\n\n\nCECILIA\nCARPENA\nmcarpena@msp.gub.uy\n\n\nMarines\nFIGUEROA\nmfigueroa@msp.gub.uy\n\n\nLUCA\nAICARDI\nmaicardi@msp.gub.uy\n\n\nMARCELA\nCASTRO\nmfcastro@msp.gub.uy\n\n\nMARIA\nMORATORIO\nxmoratorio@msp.gub.uy\n\n\nDaniel\nBLANC\ndblanc@ine.gub.uy\n\n\n\n\n\nYa casi es nuestra tabla! Pero siguen habiendo cuestiones a pulir, y es que parece haber algún problema con los caracteres especiales, tales como los paréntesis o tildes. Podemos solucionar esto especificando el tipo de encoding que tiene el archivo. Para descubrir el mismo, debemos mirar en la parte inferior derecha del archivo de texto plano.\n\n\ndata <- read.table(\n  file = \"../data/courseid_3282_participants.csv\", \n  fill = NA,\n  header = TRUE,\n  sep = \",\",\n  fileEncoding = 'UTF-8-BOM'\n)\n\n\n\n\n\n\nNombre\nApellido.s.\nDirección.de.correo\n\n\n\n\nCECILIA\nCARPENA\nmcarpena@msp.gub.uy\n\n\nMarines\nFIGUEROA\nmfigueroa@msp.gub.uy\n\n\nLUCA\nAICARDI\nmaicardi@msp.gub.uy\n\n\nMARCELA\nCASTRO\nmfcastro@msp.gub.uy\n\n\nMARIA\nMORATORIO\nxmoratorio@msp.gub.uy\n\n\nDaniel\nBLANC\ndblanc@ine.gub.uy\n\n\n\n\n\nAhora si tenemos nuestra tabla! R no es amigo de los caracteres especiales de ningún tipo. Está pensado para nombres funcionales e informáticos, no para humanos. Por tanto, conviene darles los nombres que nosotros queremos a los encabezados.\n\ndata <- read.table(\n  file = \"../data/courseid_3282_participants.csv\", \n  fill = NA,\n  header = TRUE,\n  sep = \",\",\n  fileEncoding = 'UTF-8-BOM',\n  col.names = c('nombre', 'apellido', 'direccion_correo')\n)\n\n\n\n\n\n\nnombre\napellido\ndireccion_correo\n\n\n\n\nCECILIA\nCARPENA\nmcarpena@msp.gub.uy\n\n\nMarines\nFIGUEROA\nmfigueroa@msp.gub.uy\n\n\nLUCA\nAICARDI\nmaicardi@msp.gub.uy\n\n\nMARCELA\nCASTRO\nmfcastro@msp.gub.uy\n\n\nMARIA\nMORATORIO\nxmoratorio@msp.gub.uy\n\n\nDaniel\nBLANC\ndblanc@ine.gub.uy\n\n\n\n\n\nComo se ha visto, para importar una tabla de texto plano en R se deben tomar en cuenta los siguientes elementos:\n\nSi el archivo tiene encabezados\nCuál es el separador de los datos\nSi hay que rellenar espacios en blancos con NA\nEl encoding del archivo\n\nLo cierto es que read.table es la versión más básica de una serie de funciones que sirven para el mismo propósito. Si ya conocemos de antemano el formato en que viene nuestro dataset, podemos usar funciones que requieran menos trabajo para obtener la información.\nPor ejemplo, si sabemos que nuestro archivo es un csv, podemos usar la función read.csv. Esta función ya da por hecho que el dataset contiene los encabezados en la primera fila y que el separador es una coma. Para alcanzar el mismo resultado que antes, solo debemos aclararle el encoding y el nombre que queremos para las columnas.\n\ndata <- read.csv(\n  file = \"../data/courseid_3282_participants.csv\",\n  fileEncoding = 'UTF-8-BOM',\n  col.names = c('nombre', 'apellido', 'direccion_correo')\n)\n\n\n\n\n\n\nnombre\napellido\ndireccion_correo\n\n\n\n\nCECILIA\nCARPENA\nmcarpena@msp.gub.uy\n\n\nMarines\nFIGUEROA\nmfigueroa@msp.gub.uy\n\n\nLUCA\nAICARDI\nmaicardi@msp.gub.uy\n\n\nMARCELA\nCASTRO\nmfcastro@msp.gub.uy\n\n\nMARIA\nMORATORIO\nxmoratorio@msp.gub.uy\n\n\nDaniel\nBLANC\ndblanc@ine.gub.uy\n\n\n\n\n\n\nTomar en cuenta que tanto read.csv, read.csv2, read.delim, entre muchas otras funciones, son de la misma “familia” que read.table. Funcionan prácticamente igual solo que cambian los parámetros por defecto.\n\nLo devuelto por estas funciones, es un data frame, lo cual es un objeto computacional diseñado para almacenar datos con forma de tabla.\n\n\n\nAdicionalmente, el paquete data.table, tiene una función llamada fread que permite no solo ser más eficiente con la lectura de los datos, sino que no requiere especificación de separador.\n\nlibrary(data.table)\ndata <- fread(\"../data/courseid_3282_participants.csv\")\n\n\n\n\n\n\nNombre\nApellido(s)\nDirección de correo\n\n\n\n\nCECILIA\nCARPENA\nmcarpena@msp.gub.uy\n\n\nMarines\nFIGUEROA\nmfigueroa@msp.gub.uy\n\n\nLUCA\nAICARDI\nmaicardi@msp.gub.uy\n\n\nMARCELA\nCASTRO\nmfcastro@msp.gub.uy\n\n\nMARIA\nMORATORIO\nxmoratorio@msp.gub.uy\n\n\nDaniel\nBLANC\ndblanc@ine.gub.uy\n\n\n\n\n\nEl único inconveniente parece ser el encoding, pero aclarándoselo, la función nos trae la información perfectamente.\n\ndata <- fread(\n  file = \"../data/courseid_3282_participants.csv\",\n  encoding = \"UTF-8\"\n)\n\n\n\n\n\n\nNombre\nApellido(s)\nDirección de correo\n\n\n\n\nCECILIA\nCARPENA\nmcarpena@msp.gub.uy\n\n\nMarines\nFIGUEROA\nmfigueroa@msp.gub.uy\n\n\nLUCA\nAICARDI\nmaicardi@msp.gub.uy\n\n\nMARCELA\nCASTRO\nmfcastro@msp.gub.uy\n\n\nMARIA\nMORATORIO\nxmoratorio@msp.gub.uy\n\n\nDaniel\nBLANC\ndblanc@ine.gub.uy\n\n\n\n\n\n\n\n\nHay un paquete en R especializado en la lectura de archivos. Ese paquete se llama readr. El objetivo de este paquete es realizar una importación de datos más veloz y eficiente. Además, nos ahorra tiempo en la medida que detecta automáticamente el separador de los datos.\n\nlibrary(readr)\ndata <- read_csv(\"../data/courseid_3282_participants.csv\")\n\nRows: 15 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Nombre, Apellido(s), Dirección de correo\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\n\n\nNombre\nApellido(s)\nDirección de correo\n\n\n\n\nCECILIA\nCARPENA\nmcarpena@msp.gub.uy\n\n\nMarines\nFIGUEROA\nmfigueroa@msp.gub.uy\n\n\nLUCA\nAICARDI\nmaicardi@msp.gub.uy\n\n\nMARCELA\nCASTRO\nmfcastro@msp.gub.uy\n\n\nMARIA\nMORATORIO\nxmoratorio@msp.gub.uy\n\n\nDaniel\nBLANC\ndblanc@ine.gub.uy\n\n\n\n\n\nEsta función no solo lee la información con mayor velocidad, sino que también es más inteligente a la hora de resolver la cuestión del encoding y el problema de los nombres de las columnas. También nos brinda información sobre el dataset, como la cantidad de filas, columnas, y el tipo de dato de ellas. Podemos acceder a mayor información sobre esto último su complementamos con la función spec.\n\nspec(data)\n\ncols(\n  Nombre = col_character(),\n  `Apellido(s)` = col_character(),\n  `Dirección de correo` = col_character()\n)\n\n\nEl paquete readr permite también editar el tipo de las columnas en el momento que se realiza la importación. De este modo, si tenemos que hacer un cambio de tipo de dato, podemos hacerlo integrado a la función, sin tener que dedicar tiempo a eso después.\n\ndata <- read_csv(\n  file = \"../data/courseid_3282_participants.csv\",\n  col_names = c(\"nombre\", \"apellido\", \"direccion_correo\"),\n  col_types = cols(\n    nombre = col_character(),\n    apellido = col_character(),\n    direccion_correo = col_character()\n  )\n)\n\n\n\n\n\n\nnombre\napellido\ndireccion_correo\n\n\n\n\nNombre\nApellido(s)\nDirección de correo\n\n\nCECILIA\nCARPENA\nmcarpena@msp.gub.uy\n\n\nMarines\nFIGUEROA\nmfigueroa@msp.gub.uy\n\n\nLUCA\nAICARDI\nmaicardi@msp.gub.uy\n\n\nMARCELA\nCASTRO\nmfcastro@msp.gub.uy\n\n\nMARIA\nMORATORIO\nxmoratorio@msp.gub.uy\n\n\n\n\n\n\nComo notarán, antes de asignarle un tipo de dato a las columnas, les asigné el nombre, de modo que R supiera a cuál me estaba refieriendo en cada caso. A veces cuando los encabezados tienen espacios o tildes, o cuestiones de ese estilo, y no son solo letras y guiones, R puede asignarles nombres inesperados.\n\nSin embargo, esto nos trajo un problema, ya que parece que readr entiende que si le ponemos nombres a las columnas, es que en realidad no tienen nombres, y la primera fila son datos y no encabezados. Por tanto, para solucionar esto debemos pedirle que omita la primera fila. Para ello, se usa el parámetro skip.\n\ndata <- read_csv(\n  file = \"../data/courseid_3282_participants.csv\",\n  col_names = c(\"nombre\", \"apellido\", \"direccion_correo\"),\n  col_types = cols(\n    nombre = col_character(),\n    apellido = col_character(),\n    direccion_correo = col_character()\n  ),\n  skip = 1\n)\n\n\n\n\n\n\nnombre\napellido\ndireccion_correo\n\n\n\n\nCECILIA\nCARPENA\nmcarpena@msp.gub.uy\n\n\nMarines\nFIGUEROA\nmfigueroa@msp.gub.uy\n\n\nLUCA\nAICARDI\nmaicardi@msp.gub.uy\n\n\nMARCELA\nCASTRO\nmfcastro@msp.gub.uy\n\n\nMARIA\nMORATORIO\nxmoratorio@msp.gub.uy\n\n\nDaniel\nBLANC\ndblanc@ine.gub.uy"
  },
  {
    "objectID": "chapters/import.html#archivos-de-excel",
    "href": "chapters/import.html#archivos-de-excel",
    "title": "2  Importación de datos",
    "section": "2.2 Archivos de excel",
    "text": "2.2 Archivos de excel\nExcel es otro clásico modo de almacenar información, aunque no en grandes volúmenes. Para poder leer información de esta fuente, se puede recurrir al paquete openxlsx.\n\nlibrary(openxlsx)\ndata <- read.xlsx(\"../data/ACV EFMA 2022.xlsx\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodigo\nInstitucion\nSexo\nFecha.de.nacimiento\nFecha.ACV\nTrombolisis.medicamentosa\n\n\n\n\n138\nAMDM\nM\n15014\n44565\nNO\n\n\n138\nAMDM\nM\n21693\n44565\nNO\n\n\n138\nAMDM\nM\n16604\n44566\nNO\n\n\n138\nAMDM\nM\n21545\n44567\nNO\n\n\n138\nAMDM\nF\n19542\n44568\nNO\n\n\n138\nAMDM\nF\n17541\n44570\nNO\n\n\n\n\n\n\nObtener datos desde excel por lo general requiere poco trabajo, ya que la información está delimitada en las propias celdas de excel y no tenemos que aclararle mucho a la función. Lo único que nos puede dar problema es la cuestión del formato de las fechas, ya que excel almacena las fechas como números enteros.\n\nPara evitar que esto suceda, debemos utilizar el parámetro correspondiente: detectDates.\n\ndata <- read.xlsx(\n  xlsxFile = \"../data/ACV EFMA 2022.xlsx\",\n  detectDates = TRUE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCodigo\nInstitucion\nSexo\nFecha.de.nacimiento\nFecha.ACV\nTrombolisis.medicamentosa\n\n\n\n\n138\nAMDM\nM\n1941-02-07\n2022-01-04\nNO\n\n\n138\nAMDM\nM\n1959-05-23\n2022-01-04\nNO\n\n\n138\nAMDM\nM\n1945-06-16\n2022-01-05\nNO\n\n\n138\nAMDM\nM\n1958-12-26\n2022-01-06\nNO\n\n\n138\nAMDM\nF\n1953-07-02\n2022-01-07\nNO\n\n\n138\nAMDM\nF\n1948-01-09\n2022-01-09\nNO\n\n\n\n\n\nTambién se puede seleccionar de qué hoja del libro hacer la lectura, entre otras cuestiones. Para seleccionar la hoja, se puede poner tanto el nombre de la hoja, como el número.\n\ndata <- read.xlsx(\n  xlsxFile = \"../data/ACV EFMA 2022.xlsx\",\n  detectDates = TRUE,\n  sheet = 2\n)\n\n\n\n\n\n\nNombre\nApellido(s)\nDirección.de.correo\n\n\n\n\nCECILIA\nCARPENA\nmcarpena@msp.gub.uy\n\n\nMarines\nFIGUEROA\nmfigueroa@msp.gub.uy\n\n\nLUCA\nAICARDI\nmaicardi@msp.gub.uy\n\n\nMARCELA\nCASTRO\nmfcastro@msp.gub.uy\n\n\nMARIA\nMORATORIO\nxmoratorio@msp.gub.uy\n\n\nDaniel\nBLANC\ndblanc@ine.gub.uy"
  },
  {
    "objectID": "chapters/import.html#archivos-de-spss",
    "href": "chapters/import.html#archivos-de-spss",
    "title": "2  Importación de datos",
    "section": "2.3 Archivos de SPSS",
    "text": "2.3 Archivos de SPSS\nEs muy común migrar de SPSS a R, y por tanto, hay un paquete que tenemos que tener presente para acceder a archivos creados a partir de esa herramienta, y es el haven. Dentro de ese paquete, tenemos una función denominada read_sav, que sirve para acceder a acceder a archivos de este estilo.\n\nlibrary(haven)\ndata <- read_sav(\"../data/Natalidad2021_ENAP_CursoR.sav\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nedadm\npaism\ndepar\ncodep\nnumemban\nsemprim\ntotcons\natendio\ncesopar\ntipoces\nesmult\nmultiplicidad\nsexo\npeso\nsemgest\npartlug\nmestciv\nestab\n\n\n\n\n35\n1\n18\n10\n0\n8\n11\n1\n2\n1\n2\n3\n2\n800\n32\n1\n2\n103\n\n\n35\n1\n18\n10\n0\n8\n11\n1\n2\n1\n2\n3\n2\n800\n32\n1\n2\n103\n\n\n35\n1\n18\n10\n0\n8\n11\n1\n2\n1\n2\n3\n2\n1580\n32\n1\n2\n103\n\n\n35\n2\n10\n10\n0\n7\n10\n1\n2\n1\n2\n3\n1\n2080\n34\n1\n1\n78\n\n\n35\n2\n10\n10\n0\n7\n10\n1\n2\n1\n2\n3\n1\n2430\n34\n1\n1\n78\n\n\n35\n2\n10\n10\n0\n7\n10\n1\n2\n1\n2\n3\n2\n1920\n34\n1\n1\n78"
  },
  {
    "objectID": "chapters/import.html#otros-métodos",
    "href": "chapters/import.html#otros-métodos",
    "title": "2  Importación de datos",
    "section": "2.4 Otros métodos",
    "text": "2.4 Otros métodos\nAdemás de usar estas funciones, es posible importar la información desde comandos del RStudio. Lo que esto permite es generar el código de la función sin tener que escribirlo. Se puede hacer seleccionando el botón import en la parte superior de la pestaña de Environment.\n\nSi queremos subir datos de forma rápida en R, podemos usar la función read.clipboard, que convierte en dataframe lo que tengamos seleccionado."
  },
  {
    "objectID": "chapters/import.html#exportación-de-archivos",
    "href": "chapters/import.html#exportación-de-archivos",
    "title": "2  Importación de datos",
    "section": "2.5 Exportación de archivos",
    "text": "2.5 Exportación de archivos\nAdemás de importar archivos a R, podemos exportarlos, y para eso usamos las funciones write, en lugar de las read. Para esto, suele ser suficiente utilizar las funciones básicas de R, ya que por lo general esto no requiere mucha sofisticación.\nAl igual que como sucede con la importación, en la exportación debemos considerar además del nombre del archivo, los mismos elementos que al importar: con qué elemento se van a separar los valores, el encoding del archivo, etc.\n\nNo debemos olvidar colocar la terminación al final del nombre del archivo.\n\n\nwrite.csv(\n  x = data,\n  file = \"data_exportada.csv\",\n  row.names = FALSE,\n  fileEncoding = 'UTF-8'\n)\n\n\nwrite.xlsx(\n  x = data,\n  file = \"data_exportada.xlsx\"\n)"
  },
  {
    "objectID": "chapters/dataframes.html",
    "href": "chapters/dataframes.html",
    "title": "3  Estructura de data frames",
    "section": "",
    "text": "En el laboratorio anterior se vio cómo obtener los datos proveenientes de distintos tipos de archivos. En esa tarea uno conoce el formato y estructura básica de un dataset, mas a partir de ahora es necesario concentrarse en los componentes estadísticos del dataset.\n\n\nCuando almacenamos una tabla, esta se convierte en un data frame, que es un objeto de R pensado para almacenar información. Podemos encontrar el tipo de objeto de cualquier elemento en R utilizando la función class.\nEsto ocurre también para los vectores, los cuales adquieren un tipo de dato. Los tipos de dato más habituales son los character, las números y los factores. Los factores son un método de guardado de R que sirve para incorporar valores categóricos que se repiten mucho, por ejemplo el sexo, mientras que no es tan útil para los nombres.\n\nnombres <- c('Daniel', 'Nicolás', 'Andrea')\nclass(nombres)\n\n[1] \"character\"\n\n\n\nedades <- c(30,42,28)\nclass(edades)\n\n[1] \"numeric\"\n\n\nEstos tipos de datos son los que tendrán las columnas de nuestros dataframes. Los dataframes están compuestos por una serie de vectores de similar longitud.\n\ndf <- data.frame(nombres, edades)\ndf\n\n  nombres edades\n1  Daniel     30\n2 Nicolás     42\n3  Andrea     28\n\n\nUn dataframe se muestra con un número de fila incremental a la izquierda, mientras que toma el nombre de los vectores como encabezados para las columnas, y los valores de los mismos como el contenido.\n\nclass(df)\n\n[1] \"data.frame\"\n\n\n\n\n\nAl considerar un dataframe, debe verse como un elemento de dos entradas: filas y columnas. Si el objetivo es acceder a un determinado valor, se deben dar instrucciones de cómo llegar al dato. Por ejemplo, si se quiere acceder a la edad de Nicolás, debemos indicarle en qué fila y columna se encuentra.\n\ndf[2,2]\n\n[1] 42\n\n\nPara especificar esta cuestión, es necesario abrir paréntesis rectos luego del nombre de la tabla, y específicar el número de fila previo a la coma, y el número de columna posterior a la coma.\nSi quisiéramos obtener más información, podemos incorporar varias filas o columnas, ya sea seleccionándolas manualmente o si están de corrido, utilizar un slicing.\n\ndf[2,c(1,2)]\n\n  nombres edades\n2 Nicolás     42\n\n\n\ndf[2,1:2]\n\n  nombres edades\n2 Nicolás     42\n\n\nCuando se trae más información, se despliegan los nombres de las columnas y el número de fila. Estos métodos se pueden utilizar para filtrar un dataset, mas no es el método más conveniente en general.\n\ndf2 <- df[1:2,1:2]\ndf2\n\n  nombres edades\n1  Daniel     30\n2 Nicolás     42\n\n\nResulta más conveniente brindar una condición por la cual filtrar el dataset, ya que esto no varía luego según la cantidad de filas u otros cambios. Se verá este tipo de cuestión con un dataset de ejemplo."
  },
  {
    "objectID": "chapters/dataframes.html#explorando-un-dataset",
    "href": "chapters/dataframes.html#explorando-un-dataset",
    "title": "3  Estructura de data frames",
    "section": "3.2 Explorando un dataset",
    "text": "3.2 Explorando un dataset\nLo primero que debemos hacer es obtener un dataset. Siempre es conveniente ver las primeras filas de la tabla para ver en qué formato llegaron. Esto puede hacerse con la función head.\n\nlibrary(openxlsx)\ndata <- read.xlsx(\n  xlsxFile = \"../data/ACV EFMA 2022.xlsx\",\n  detectDates = TRUE\n)\nhead(data)\n\n  Codigo Institucion Sexo Fecha.de.nacimiento  Fecha.ACV\n1    138        AMDM    M          1941-02-07 2022-01-04\n2    138        AMDM    M          1959-05-23 2022-01-04\n3    138        AMDM    M          1945-06-16 2022-01-05\n4    138        AMDM    M          1958-12-26 2022-01-06\n5    138        AMDM    F          1953-07-02 2022-01-07\n6    138        AMDM    F          1948-01-09 2022-01-09\n  Trombolisis.medicamentosa\n1                        NO\n2                        NO\n3                        NO\n4                        NO\n5                        NO\n6                        NO\n\n\nLa función clásica para comprender el estructura de un dataset, es justamente str. Esto nos permite ver el tipo de dato de cada variable, junto con la cantidad de variables y observaciones.\n\nstr(data)\n\n'data.frame':   836 obs. of  6 variables:\n $ Codigo                   : num  138 138 138 138 138 138 138 138 138 138 ...\n $ Institucion              : chr  \"AMDM\" \"AMDM\" \"AMDM\" \"AMDM\" ...\n $ Sexo                     : chr  \"M\" \"M\" \"M\" \"M\" ...\n $ Fecha.de.nacimiento      : Date, format: \"1941-02-07\" \"1959-05-23\" ...\n $ Fecha.ACV                : Date, format: \"2022-01-04\" \"2022-01-04\" ...\n $ Trombolisis.medicamentosa: chr  \"NO\" \"NO\" \"NO\" \"NO\" ...\n\n\nEste dataset tiene una sola variable numérica, junto a tres variables de texto y dos de fecha. Si tuvieramos más variables numéricas podríamos usar la función summary, que sirve para brindar una serie de elementos estadísticos sobre las variables. Usaremos un dataset nativo de R llamado Iris para poder aplicarlo.\n\niris <- iris\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\nComo puede apreciarse, el summary trae información estadística de las variables numéricas, e ignora a las de otro tipo de dato. Este tipo de funciones son muy útiles para comprobar que el dataset se importó correctamente y que las variables tienen el valor deseado. Por lo general una cuestión que esto revela es si el indicador de decimal es el correcto, por definición R considera el “.” como separador decimal, pero en el idioma español se utiliza por lo general la “,”.\nVolviendo a nuestro dataset, en caso de querer conocer, por ejemplo, la frecuencia de valores de una variable categórica, se puede usar la función table. Para indicarle a R que queremos acceder a una columna del dataframe, debemos utilizar el $ antes del nombre de la columna.\n\ntable(data$Sexo)\n\n\n  F   M \n435 401 \n\n\nTambién se puede acceder a la cantidad relativa.\n\nprop.table(table(data$Sexo))\n\n\n        F         M \n0.5203349 0.4796651 \n\n\nSe puede hacer esto combinando las variables\n\ntable(data$Sexo, data$Trombolisis.medicamentosa)\n\n   \n     NO  SI\n  F 398  37\n  M 361  40\n\n\n\nprop.table(\n  table(\n    data$Sexo,\n    data$Trombolisis.medicamentosa\n  ),\n  margin = 2\n)\n\n   \n           NO        SI\n  F 0.5243742 0.4805195\n  M 0.4756258 0.5194805\n\n\n\nprop.table(\n  table(\n    data$Sexo,\n    data$Trombolisis.medicamentosa\n  ),\n  margin = 1\n)\n\n   \n            NO         SI\n  F 0.91494253 0.08505747\n  M 0.90024938 0.09975062\n\n\n\nModificación de tipos de datos\nLas columnas de los dataset tienen tipos de datos asignados, pero estos pueden ser modificables, siempre y cuando sea coherente. Por ejemplo, podemos almacenar un “2” como un texto, pero no almacenar un “hola” como un número. Para transformar los tipos de datos podemos utilizar varios métodos, uno como ya vimos es hacerlo durante la importación, otro es usando las funciones as.type\n\ndata$Sexo <- as.factor(data$Sexo)\ndata$Trombolisis.medicamentosa <- as.factor(data$Trombolisis.medicamentosa)\ndata$Institucion <- as.factor(data$Institucion)\ndata$Codigo <- as.character(data$Codigo)\n\n¿Se acuerdan de summary? Con los factores funciona también.\n\nsummary(data)\n\n    Codigo                       Institucion  Sexo    Fecha.de.nacimiento \n Length:836         ASSE               :274   F:435   Min.   :1922-01-06  \n Class :character   ASOCIACION ESPAÑOLA: 89   M:401   1st Qu.:1940-04-20  \n Mode  :character   MEDICA URUGUAYA    : 87           Median :1948-05-31  \n                    SMQS               : 34           Mean   :1950-04-27  \n                    SMI                : 32           3rd Qu.:1958-10-13  \n                    COMERO             : 28           Max.   :2021-09-06  \n                    (Other)            :292                               \n   Fecha.ACV          Trombolisis.medicamentosa\n Min.   :2022-01-01   NO:759                   \n 1st Qu.:2022-01-31   SI: 77                   \n Median :2022-03-02                            \n Mean   :2022-02-28                            \n 3rd Qu.:2022-03-28                            \n Max.   :2022-04-30"
  },
  {
    "objectID": "chapters/data_analisis.html",
    "href": "chapters/data_analisis.html",
    "title": "4  Análisis de datos con R",
    "section": "",
    "text": "El paquete por excelencia para realizar análisis de datos con R se denomina tidyverse. Este paquete no es un paquete en si mismo, sino una colección de múltiples paquetes que comparten el objetivo: realizar análisis de datos.\nAl ser muchos paquetes, tarda un poco en instalar.\n\ninstall.packages('tidyverse')\n\n\nlibrary(tidyverse)\n\n\n\nPara obtener los datos, podemos utilizar algunas de las funciones que hemos visto en el curso.\n\nsips <- read_delim(\"../data/Sips_febrero22.csv\",delim = \";\")\n\n\nglimpse(sips)\n\nRows: 70,273\nColumns: 445\n$ inscod                <dbl> 153, 153, 153, 153, 153, 153, 153, 153, 153, 153…\n$ insnom                <chr> \"CAMCEL\", \"CAMCEL\", \"CAMCEL\", \"CAMCEL\", \"CAMCEL\"…\n$ anio                  <dbl> 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, …\n$ mes                   <dbl> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ cod_persona           <dbl> 22690963, 24551323, 25045641, 25045641, 25283285…\n$ sexo                  <dbl> 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1, …\n$ edad                  <dbl> 66, 63, 60, 60, 58, 68, 65, 58, 55, 64, 64, 63, …\n$ accionista            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ filialcod             <dbl> 548, 547, 539, 548, 548, 548, 548, 539, 539, 547…\n$ filialnom             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ espcod                <dbl> 310000, 1480000, 310000, 310000, 1040000, 310000…\n$ funcioncod            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ funcionnom            <chr> \"Médico\", \"Médico\", \"Médico\", \"Médico\", \"Médico\"…\n$ grupespcod            <dbl> 1, 1, 1, 1, 2, 1, 2, 1, 1, 3, 2, 2, 3, 3, 1, 2, …\n$ grupespnom            <chr> \"Especialidades Basicas\", \"Especialidades Basica…\n$ relacioncod           <dbl> 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ relacion              <chr> \"Titular\", \"Titular\", \"Titular\", \"Titular\", \"Tit…\n$ cargocod              <dbl> 180, 180, 190, 190, 180, 180, 180, 180, 180, 180…\n$ tipoimae              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cargonom              <chr> \"Cargos operativos\", \"Cargos operativos\", \"Cargo…\n$ gcargocod             <dbl> 4, 4, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, …\n$ gcargonom             <chr> \"Cargos operativos asistenciales\", \"Cargos opera…\n$ espnom                <chr> \"DOCTOR EN MEDICINA\", \"ESPECIALISTA EN PEDIATRIA…\n$ yfdocat               <dbl> 13331.13, NA, NA, NA, 9095.07, NA, 6977.04, 4983…\n$ yfdocateemm           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yantigue              <dbl> 73258.92, 71297.00, 12864.00, 12864.00, 34885.20…\n$ yantigueeemm          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ypresen               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ypreseneemm           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yaccionis             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ygastoscon            <dbl> NA, 90483, NA, NA, NA, NA, NA, NA, NA, 87040, NA…\n$ yquebranto            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yhogconst             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ygastoloc             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yferiados             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycomision             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsdir                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsdireemm             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hspolc                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 2, N…\n$ hspolef               <dbl> 6.23, 4.94, NA, NA, 2.24, NA, NA, 1.00, 1.00, 1.…\n$ hsepoliex             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsaceneemmc           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsaceneemmef          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsaceneemmex          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsadomnourgentec      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsadomnourgenteef     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsadomnourgenteex     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsautoeemmc           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsautoeemmef          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsautoeemmex          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsambubasicoc         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsambubasicoef        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsambubasicoex        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsambuavanzadoc       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsambuavanzadoef      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsambuavanzadoex      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsapromocionc         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsapromocionef        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsapromocionex        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsudc                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsudef                <dbl> NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, N…\n$ hsudex                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsretc                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsretef               <dbl> NA, 12, NA, NA, NA, NA, NA, NA, NA, NA, NA, 2, N…\n$ hsretex               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsreteeemmc           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsreteeemmef          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsreteeemmex          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hspuec                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hspueef               <dbl> NA, NA, NA, NA, NA, NA, NA, 48, NA, 1, NA, NA, N…\n$ hspueex               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstraslacomunc        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstraslacomunef       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstraslacomunex       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstraslaespec         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstraslaespeef        <dbl> NA, NA, NA, NA, NA, 1, NA, NA, NA, NA, NA, NA, N…\n$ hstraslaespeex        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsintdc               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsintdef              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsintdex              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsguinc               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsguinef              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsguinex              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsvisanc              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsvisanef             <dbl> NA, NA, NA, NA, NA, NA, NA, 28, 84, NA, NA, NA, …\n$ hsvisanex             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hscmoderadosc         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hscmoderadosef        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hscmoderadosex        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsblockc              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsblockef             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsblockex             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsblockcoordc         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsblockcoordef        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsblockcoordex        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsblockfguardiac      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsblockfguardiaef     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsblockfguardiaex     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongadc          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongadef         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongadex         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguaradc          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguaradef         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguaradex         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongpec          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongpeef         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongpeex         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguarpec          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguarpef          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguarpex          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongneoc         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongneoef        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongneoex        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguarneoc         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguarneoef        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguarneoex        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongpolic        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongpolief       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctilongpoliex       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguarpolic        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguarpolief       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsctiguarpoliex       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hspolcuidadospaliac   <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hspolcuidadospaliaef  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hspolcuidadospaliaex  <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsadomcuidadoc        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsadomcuidadoef       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, 1, NA, NA, NA, N…\n$ hsadomcuidadoex       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssalacuidadoc        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssalacuidadoef       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssalacuidadoex       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsguardiatelcuidadoc  <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsguardiatelcuidadoef <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsguardiatelcuidadoex <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hscoordcuidadopalc    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hscoordcuidadopalef   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hscoordcuidadopalex   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstecdiagcoordc       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstecdiagcoordef      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstecdiagcoordex      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstecdiagguardiac     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstecdiagguardiaef    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstecdiagguardiaex    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstecdiagasoc         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstecdiagasoef        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hstecdiagasoex        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsalimentacionc       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsalimentacionef      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsalimentacionex      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsregistrosmc         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsregistrosmef        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsregistrosmex        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssaludlaboralc       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssaludlaboralef      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssaludlaboralex      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssegpacientec        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssegpacienteef       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssegpacienteex       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsactinstic           <dbl> NA, 1, NA, NA, NA, NA, NA, NA, NA, 1, NA, NA, NA…\n$ hsactinstief          <dbl> 4, 5, NA, 1, 2, 4, 202, 1, NA, 3, 283, NA, 3, 3,…\n$ hsactinstiex          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssgeneralesc         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssgeneralesef        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssgeneralesex        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsgeneraleseemmc      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsgeneraleseemmef     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsgeneraleseemmex     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hscapacita            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hscapacitaeemm        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hscertifi             <dbl> NA, 1, 1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ hscertifieemm         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hslic                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsliceemm             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsausen               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsauseneemm           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cpoli                 <dbl> 113.0, 102.0, NA, NA, 43.0, NA, NA, 1.0, 1.0, 32…\n$ caceneemm             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ llamnourg             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cautoeemm             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cambulanciabasico     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cambulanciaavanzo     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ llamurg               <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ creten                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ creteneemm            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ctraslacomun          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ctraslaespe           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ vintd                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoordmen           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoordcorr          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoordmay           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoordalta          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoordaesp          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirurgmen             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirurgcorr            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirurgmay             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirurgalta            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirurgaesp            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoorcati           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoorcatii          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoorcatiii         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoorcativ          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoorcatv           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ circoorcatvi          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirurgcati            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirugcatii            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirugcatiii           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirurgcativ           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirurgcatv            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cirurgcatvi           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ anescoora             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ anescoorb             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ anescoorc             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ anescoord             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ anesurga              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ anesurgb              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ anesurgc              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ anesurgd              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ partos                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cesareaurg            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cesareacoor           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ cpolcuidadospalia     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ lladomcuidado         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ atecdiagcoord         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ atecdiagurg           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ asaludlaboral         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ llsanurgsinret        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ llsanurg              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssapoyonoasoc        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssapoyonoasoef       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hssapoyonoasoex       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ hsoaef                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ actosoa               <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ydir                  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ydireemm              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ypolf                 <dbl> 47870.27, 49354.00, NA, NA, 37601.56, NA, NA, 56…\n$ ypolv                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ypolex                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yaceneemmf            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yaceneemmv            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yaceneemmex           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yadomnourgentef       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yadomnourgentev       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yadomnourgentevia     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yadomnourgenteex      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yautoeemmf            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yautoeemmv            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yautoeemmvia          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yautoeemmex           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yautoeemmnoct         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yambubasicof          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yambubasicov          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yambubasicovia        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yambubasicoex         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yambubasiconoct       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yambuavanzadof        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yambuavanzadov        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yambuavanzadovia      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yambuavanzadoex       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yambuavanzadonoct     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yapromocionf          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yapromocionvia        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yapromocionex         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yudf                  <dbl> NA, NA, NA, NA, NA, 18378, NA, NA, NA, NA, NA, N…\n$ yudv                  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yudvia                <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yudex                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yudnoc                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yretf                 <dbl> NA, 2491.8, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yretv                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 5830…\n$ yretvia               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yretex                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yretnoc               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yreteemmf             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yreteemmv             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yreteemmvia           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yreteemmex            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yreteemmnoc           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ypuef                 <dbl> NA, NA, NA, NA, NA, NA, NA, 10369.32, NA, NA, NA…\n$ ypuev                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, 5980.32, NA,…\n$ ypueex                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ypuenoc               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytraslacomunf         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytraslacomunv         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytraslacomunvia       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytraslacomunex        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytraslacomunnoc       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytraslaespef          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytraslaespev          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytraslaespevia        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytraslaespeex         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytraslaespenoc        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yintdf                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yintdv                <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yintdvia              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yintdex               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yguinf                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yguinv                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yguinex               <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yguinnoc              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yvisanf               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yvisanv               <dbl> NA, NA, NA, NA, NA, NA, NA, 16777.04, 50331.12, …\n$ yvisanex              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycmoderadosf          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycmoderadosv          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycmoderadosex         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycmoderadosnoc        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yblockf               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yblockv               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yblockex              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yblocknoc             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yblockcoordf          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yblockcoordv          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yblockcoordex         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yblockfguardiaf       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yblockfguardiav       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yblockfguardiaex      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoordmen          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoordcorr         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoordmay          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoordalta         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoordaesp         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirurgmen            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirurgcorr           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirurgmay            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirurgalta           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirurgaesp           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoorcati          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoorcatii         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoorcatiii        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoorcativ         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoorcatv          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycircoorcatvi         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirurgcati           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirugcatii           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirugcatiii          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirurgcativ          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirurgcatv           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycirurgcatvi          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yanescoora            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yanescoorb            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yanescoorc            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yanescoord            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yanesurga             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yanesurgb             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yanesurgc             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yanesurgd             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ypartos               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycesareaurg           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycesareacoor          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctiaf                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctiav                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctiaex               <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctiacerr             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctianoc              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctipf                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctipv                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctipex               <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctipcerr             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctipnoc              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctinf                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctinv                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctinex               <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctincerr             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctinnoc              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctipolf              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctipolv              <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctipolex             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctipolcerr           <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yctipolnoc            <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ypolcuidadospalf      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ypolcuidadospalv      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ypolcuidadospalex     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yadomcuidadof         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yadomcuidadov         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, 69776, NA, NA, N…\n$ yadomcuidadovia       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yadomcuidadoex        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysalacuidadof         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysalacuidadov         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysalacuidadoex        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysalacuidadonoc       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yguardiatelcuidadof   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yguardiatelcuidadov   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yguardiatelcuidadovia <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yguardiatelcuidadoex  <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yguardiatelcuidadonoc <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycoordcuidadopalf     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycoordcuidadopalv     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycoordcuidadopalex    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagcoordf        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagcoordv        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagcoordex       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagcoordnoc      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagguardiaf      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagguardiav      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagguardiaex     <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagguardianoc    <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagasof          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagasov          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagasoex         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagasonoc        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yalimentacionf        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yalimentacionv        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yalimentacionex       <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yalimentacionnoc      <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yregistrosmf          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yregistrosmv          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yregistrosmex         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysaludlaboralf        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysaludlaboralv        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysaludlaboralex       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysegpacientef         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysegpacientev         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysegpacienteex        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yactinsti             <dbl> 122107.0, 224918.0, NA, 289742.0, 87213.0, 27039…\n$ yactinstiex           <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysgeneralesf          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysgeneralesex         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ygeneraleseemmf       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ygeneraleseemmex      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysgeneralesvia        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysgeneralesnoc        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysgeneralesv          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysgeneraleemmvia      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysgeneraleemmnoc      <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysgeneraleemmv        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycapacita             <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycapacitaeemm         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ylic                  <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yliceemm              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yllamurgsinret        <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yllamnourg            <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yllamurgsinretvia     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yllamnourgsinretvia   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagcoordcerr     <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagguardiacerr   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ytecdiagasocerr       <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ yadomnourgnoc         <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycertifi              <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ycertifieemm          <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysapoyonoasf          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysapoyonoasv          <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysapoyonoasoex        <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysapoyonoanoc         <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysoaf                 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n$ ysoav                 <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n\n\nParece ser que nuestro dataset tiene muchas variables. Una de las funciones que tidyverse provee nos permite seleccionar rápidamente las columnas con las que vamos a trabajar. Esta función se llama select. Para usar esta función ponemos como primer parámetro el nombre del dataset que vamos a filtrar, y luego los nombres de las columnas que nos interesan.\n\nsips_filtrado <- select(\n  sips, anio, mes,inscod, insnom, cod_persona, accionista, sexo\n)\nstr(sips_filtrado)\n\ntibble [70,273 × 7] (S3: tbl_df/tbl/data.frame)\n $ anio       : num [1:70273] 2022 2022 2022 2022 2022 ...\n $ mes        : num [1:70273] 2 2 2 2 2 2 2 2 2 2 ...\n $ inscod     : num [1:70273] 153 153 153 153 153 153 153 153 153 153 ...\n $ insnom     : chr [1:70273] \"CAMCEL\" \"CAMCEL\" \"CAMCEL\" \"CAMCEL\" ...\n $ cod_persona: num [1:70273] 22690963 24551323 25045641 25045641 25283285 ...\n $ accionista : num [1:70273] 0 0 0 0 0 0 0 0 0 0 ...\n $ sexo       : num [1:70273] 1 1 2 2 2 1 1 1 2 1 ...\n\n\nAhora tenemos un dataframe más manejable. Siempre es recomendable quedarse con las columnas que se utilizarán para el análisis, tanto por un tema de facilidad de comprensión del dataset como por el uso de memoria del computador.\nLa función select se encuentra dentro del paquete dplyr, que a su vez está dentro de tidyverse. Este paquete permite el uso de pipes para concatenar una serie de actos con el dataframe. No es obligación usarlo, pero sirve para ordenar una serie de acciones que querremos realizar sobre los datos.\nSe puede usar de la siguiente manera:\n\nsips_filtrado <- sips %>% \n  select(\n    anio, mes,inscod, insnom, cod_persona, accionista, sexo\n  )\n\nComo vemos, de esta forma obtenemos el mismo resultado. Lo que hacemos es decirle a R que a partir de ahora trabajaremos con el dataset sips y que todo lo que viene a continuación va a ser en relación a esa tabla. Por tanto, a partir de ahí no habrá que usar los $ para referirse a las columnas, simplemente dará por hecho que son del dataframe. Esto sucede con todas las funciones de tidyverse que se usen con los pipes.\nOtro tipo de filtro que podemos querer realizar es hacia las filas. Anteriormente se ha visto que pueden seleccionarse filtras manualmente aclarando el número de fila y demás, pero por lo general resulta más conveniente filtrar en base a una condición. Por ejemplo, veamos qué organizaciones tenemos en el dataset.\n\nunique(sips_filtrado$insnom)\n\n [1] \"CAMCEL\"                      \"AMEDRIN\"                    \n [3] \"CAMY\"                        \"MP\"                         \n [5] \"CAMEDUR\"                     \"SEGURO AMERICANO\"           \n [7] \"COMERI\"                      \"CAAMEPA\"                    \n [9] \"SWISS MEDICAL URUGUAY\"       \"MEDICARE\"                   \n[11] \"SMQS\"                        \"CRAMI\"                      \n[13] \"CIRCULO CATOLICO\"            \"GREMEDA\"                    \n[15] \"COMEFLO\"                     \"GREMCA\"                     \n[17] \"ASOCIACION ESPAÑOLA\"         \"AMDM\"                       \n[19] \"MEDICA URUGUAYA\"             \"Ministerio de Salud Pública\"\n[21] \"CAMOC\"                       \"UNIVERSAL\"                  \n[23] \"COMEF\"                       \"SMI\"                        \n[25] \"CASMER\"                      \"COMERO\"                     \n[27] \"CAMS\"                        \"AMSJ\"                       \n[29] \"COMEPA\"                      \"COMTA\"                      \n[31] \"CAMDEL\"                      \"CUDAM\"                      \n[33] \"COSEM\"                       \"CAMEC\"                      \n[35] \"CRAME\"                       \"COMECA\"                     \n[37] \"IAC\"                         \"CASMU\"                      \n\n\nVamos a querer trabajar con los registros de MP, por tanto, podemos usar funciones de tidyverse para realizar esta tarea. Crearemos un nuevo dataset denominado sips_filtrado_mp en donde solo almacenaremos registros de esta entidad.\n\nsips_filtrado_mp <- sips_filtrado %>% \n  filter(insnom == 'MP')\nhead(sips_filtrado_mp)\n\n# A tibble: 6 × 7\n   anio   mes inscod insnom cod_persona accionista  sexo\n  <dbl> <dbl>  <dbl> <chr>        <dbl>      <dbl> <dbl>\n1  2022     2    111 MP        20008549          0     1\n2  2022     2    111 MP        20172929          0     1\n3  2022     2    111 MP        20438713          0     1\n4  2022     2    111 MP        20480631          0     2\n5  2022     2    111 MP        20688953          0     2\n6  2022     2    111 MP        21431711          0     2\n\n\nPodemos usar el select no solo para elegir las variables que queremos sino también para desechar las que no nos interesan. Por ejemplo, ahora tenemos un dataset que solo tiene registros de MP, por tanto las variables de código de institución y nombre de institución nos aportan poco, por lo que podemos quitarlas.\n\nsips_filtrado_mp <- sips_filtrado_mp %>% select(-inscod, -insnom)\nhead(sips_filtrado_mp)\n\n# A tibble: 6 × 5\n   anio   mes cod_persona accionista  sexo\n  <dbl> <dbl>       <dbl>      <dbl> <dbl>\n1  2022     2    20008549          0     1\n2  2022     2    20172929          0     1\n3  2022     2    20438713          0     1\n4  2022     2    20480631          0     2\n5  2022     2    20688953          0     2\n6  2022     2    21431711          0     2\n\n\nEl último detalle que se le puede hacer al dataframe para que quede perfecto es cambiarle algunos nombres para que reflejen mejor el contenido de las variables. En este caso vamos a querer modificar los nombres de columna de cod_persona a documento y accionista a es_accionista. Podemos hacerlo con la función rename. Debemos aclararle el nuevo nombre de la variable y el nombre de la que vamos a sustituir. Se puede usar para varias columnas a la vez.\n\nsips_filtrado_mp <- sips_filtrado_mp %>% \n  rename(\n    documento = cod_persona,\n    es_accionista = accionista\n  )\nhead(sips_filtrado_mp)\n\n# A tibble: 6 × 5\n   anio   mes documento es_accionista  sexo\n  <dbl> <dbl>     <dbl>         <dbl> <dbl>\n1  2022     2  20008549             0     1\n2  2022     2  20172929             0     1\n3  2022     2  20438713             0     1\n4  2022     2  20480631             0     2\n5  2022     2  20688953             0     2\n6  2022     2  21431711             0     2\n\n\nYa tenemos el dataframe tal cual como queremos, pero el verdadero poder de tidyverse radica en la concatenación de pipes para alcanzar el objetivo en una sola orden a R. Podemos obtener el mismo dataframe que nos llevó todo este laboratorio de la siguiente manera:\n\nsips_filtrado_mp <- sips %>% \n  select(anio, mes,inscod, insnom, cod_persona, accionista, sexo) %>% \n  filter(insnom == 'MP') %>% \n  select(-inscod, -insnom) %>% \n  rename(documento = cod_persona, es_accionista = accionista)\n  \nhead(sips_filtrado_mp)\n\n# A tibble: 6 × 5\n   anio   mes documento es_accionista  sexo\n  <dbl> <dbl>     <dbl>         <dbl> <dbl>\n1  2022     2  20008549             0     1\n2  2022     2  20172929             0     1\n3  2022     2  20438713             0     1\n4  2022     2  20480631             0     2\n5  2022     2  20688953             0     2\n6  2022     2  21431711             0     2\n\n\n\n\n\nTidyverse también nos provee funciones para agregar y modificar columnas. Estas funciones son mutate y transmute. Mutate permite agregar una columna nueva al dataframe. Transmute hace lo mismo pero además elimina el resto de las columnas, permitiendo hacer un select implícito.\nPara empezar, vamos a querer volver a tener una variable que idenfique la institución, su nombre será institucion y su contenido “Medicina Personalizada”.\n\nsips_columnas <- sips_filtrado_mp %>% mutate(institucion = \"Medicina Personalizada\")\nhead(sips_columnas)\n\n# A tibble: 6 × 6\n   anio   mes documento es_accionista  sexo institucion           \n  <dbl> <dbl>     <dbl>         <dbl> <dbl> <chr>                 \n1  2022     2  20008549             0     1 Medicina Personalizada\n2  2022     2  20172929             0     1 Medicina Personalizada\n3  2022     2  20438713             0     1 Medicina Personalizada\n4  2022     2  20480631             0     2 Medicina Personalizada\n5  2022     2  20688953             0     2 Medicina Personalizada\n6  2022     2  21431711             0     2 Medicina Personalizada\n\n\nOtra necesidad que tenemos es desprendernos de las variables anio y mes y generar una variable fecha que sea el primer día del mes y el año detallado en las columnas. Para alcanzar esto usaremos la función de concatenación en R llamada paste y mediante mutate la insertaremos en el dataframe. También debemos aclararle que el formato debe ser de fecha.\n\nsips_columnas <- sips_columnas %>% \n  mutate(fecha = as.Date(paste(anio, mes, \"1\", sep = \"-\"))) %>% \n  select(-anio,-mes)\nhead(sips_columnas)\n\n# A tibble: 6 × 5\n  documento es_accionista  sexo institucion            fecha     \n      <dbl>         <dbl> <dbl> <chr>                  <date>    \n1  20008549             0     1 Medicina Personalizada 2022-02-01\n2  20172929             0     1 Medicina Personalizada 2022-02-01\n3  20438713             0     1 Medicina Personalizada 2022-02-01\n4  20480631             0     2 Medicina Personalizada 2022-02-01\n5  20688953             0     2 Medicina Personalizada 2022-02-01\n6  21431711             0     2 Medicina Personalizada 2022-02-01\n\n\nTambién nos interesará generar una variable genero que sustituya a la columna sexo y sea el mismo contenido pero en texto. Para esto podemos usar la función ifelse. Esta función básicamente realiza el mismo trabajo que la función de excel: le insertamos una condición y luego el siguiente parámetro es el que inserta en caso de que la condición se cumpla, y el siguiente en caso que no.\n\nsips_columnas <- sips_columnas %>% \n  mutate(genero = if_else(sexo == 1, \"Hombre\", \"Mujer\")) %>% \n  select(-sexo) %>% \n  rename(sexo = genero)\nhead(sips_columnas)\n\n# A tibble: 6 × 5\n  documento es_accionista institucion            fecha      sexo  \n      <dbl>         <dbl> <chr>                  <date>     <chr> \n1  20008549             0 Medicina Personalizada 2022-02-01 Hombre\n2  20172929             0 Medicina Personalizada 2022-02-01 Hombre\n3  20438713             0 Medicina Personalizada 2022-02-01 Hombre\n4  20480631             0 Medicina Personalizada 2022-02-01 Mujer \n5  20688953             0 Medicina Personalizada 2022-02-01 Mujer \n6  21431711             0 Medicina Personalizada 2022-02-01 Mujer \n\n\nEn este caso if_else resulta de utilidad porque la cantidad de condiciones eran pocas. En caso que se sean muchas, empieza a ser ineficiente en la medida que hay que concatenar if_else tras if_else. Para los casos en los que haya muchas posibilidades, es mejor usar case_when.\nPara demostrar el uso de esta función, crearemos una variable que diga si el documento es de menos de un millón, mayor a un millón, mayor a dos millones, a tres, a cuatro, y mayor a cinco. Al final de la función, se le especifica el tipo de dato de la variable resultante.\n\nsips_columnas %>% mutate(\n  tipo_documento = case_when(\n    documento <= 10000000 ~ \"Menor o igual a un millón\",\n    documento > 10000000 ~ \"Mayor a un millón\",\n    documento > 20000000 ~ \"Mayor a dos millones\",\n    documento > 30000000 ~ \"Mayor a tres millones\",\n    documento > 40000000 ~ \"Mayor a cuatro millones\",\n    documento > 50000000 ~ \"Mayor a cinco millones\",\n    TRUE ~ \"Otro\"\n  )\n)\n\n# A tibble: 574 × 6\n   documento es_accionista institucion            fecha      sexo   tipo_docum…¹\n       <dbl>         <dbl> <chr>                  <date>     <chr>  <chr>       \n 1  20008549             0 Medicina Personalizada 2022-02-01 Hombre Mayor a un …\n 2  20172929             0 Medicina Personalizada 2022-02-01 Hombre Mayor a un …\n 3  20438713             0 Medicina Personalizada 2022-02-01 Hombre Mayor a un …\n 4  20480631             0 Medicina Personalizada 2022-02-01 Mujer  Mayor a un …\n 5  20688953             0 Medicina Personalizada 2022-02-01 Mujer  Mayor a un …\n 6  21431711             0 Medicina Personalizada 2022-02-01 Mujer  Mayor a un …\n 7  21484809             0 Medicina Personalizada 2022-02-01 Hombre Mayor a un …\n 8  22301055             0 Medicina Personalizada 2022-02-01 Hombre Mayor a un …\n 9  22392659             0 Medicina Personalizada 2022-02-01 Hombre Mayor a un …\n10  22806233             0 Medicina Personalizada 2022-02-01 Hombre Mayor a un …\n# … with 564 more rows, and abbreviated variable name ¹​tipo_documento\n\n\nTal como puede apreciarse, se puede utilizar tidyverse para mostrar resultados en consola. No es necesario almacenar los procesos en objetos.\n\nsips_filtrado_mp %>% \n  mutate(\n    institucion = \"Medicina Personalizada\",\n    fecha = as.Date(paste(anio, mes, \"1\", sep = \"-\")),\n    genero = if_else(sexo == 1, \"Hombre\", \"Mujer\")\n  ) %>% \n  select(\n    -anio,-mes,-sexo\n  ) %>% \n  rename(\n    sexo = genero\n  ) \n\n# A tibble: 574 × 5\n   documento es_accionista institucion            fecha      sexo  \n       <dbl>         <dbl> <chr>                  <date>     <chr> \n 1  20008549             0 Medicina Personalizada 2022-02-01 Hombre\n 2  20172929             0 Medicina Personalizada 2022-02-01 Hombre\n 3  20438713             0 Medicina Personalizada 2022-02-01 Hombre\n 4  20480631             0 Medicina Personalizada 2022-02-01 Mujer \n 5  20688953             0 Medicina Personalizada 2022-02-01 Mujer \n 6  21431711             0 Medicina Personalizada 2022-02-01 Mujer \n 7  21484809             0 Medicina Personalizada 2022-02-01 Hombre\n 8  22301055             0 Medicina Personalizada 2022-02-01 Hombre\n 9  22392659             0 Medicina Personalizada 2022-02-01 Hombre\n10  22806233             0 Medicina Personalizada 2022-02-01 Hombre\n# … with 564 more rows\n\n\n\n\n\nEn el uso del case_when se cometió un error adrede (?) ya que la primer condición, que es que el documento sea mayor a un millón, siempre se cumple, por tanto, asigna ese valor a todos los elementos y nunca llega a evaluar el resto. Hay dos posibilidades de solucionar este inconveniente.\nLa primera es invertir el orden de las condiciones, comenzando de arriba hacia abajo.\n\nsips_columnas %>% mutate(\n  tipo_documento = case_when(\n    documento > 50000000 ~ \"Mayor a cinco millones\",\n    documento > 40000000 ~ \"Mayor a cuatro millones\",\n    documento > 30000000 ~ \"Mayor a tres millones\",\n    documento > 20000000 ~ \"Mayor a dos millones\",\n    documento > 10000000 ~ \"Mayor a un millón\",\n    documento <= 10000000 ~ \"Menor o igual a un millón\",\n    TRUE ~ \"Otro\"\n  )\n)\n\n# A tibble: 574 × 6\n   documento es_accionista institucion            fecha      sexo   tipo_docum…¹\n       <dbl>         <dbl> <chr>                  <date>     <chr>  <chr>       \n 1  20008549             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n 2  20172929             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n 3  20438713             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n 4  20480631             0 Medicina Personalizada 2022-02-01 Mujer  Mayor a dos…\n 5  20688953             0 Medicina Personalizada 2022-02-01 Mujer  Mayor a dos…\n 6  21431711             0 Medicina Personalizada 2022-02-01 Mujer  Mayor a dos…\n 7  21484809             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n 8  22301055             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n 9  22392659             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n10  22806233             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n# … with 564 more rows, and abbreviated variable name ¹​tipo_documento\n\n\nLa otra opción es dar mayor precisión a las condiciones, y para eso se pueden combinar condiciones. Vamos a pedirle a R que los valore que para cada caso sea mayor que determinado valor, pero también menor al de la siguiente categoría. De este modo no importa el orden de las condiciones, ya que son muy precisas.\n\nsips_columnas %>% mutate(\n  tipo_documento = case_when(\n    documento <= 10000000 ~ \"Menor o igual a un millón\",\n    documento > 10000000 & documento < 20000000 ~ \"Mayor a un millón\",\n    documento > 20000000 & documento < 30000000 ~ \"Mayor a dos millones\",\n    documento > 30000000 & documento < 40000000 ~ \"Mayor a tres millones\",\n    documento > 40000000 & documento < 50000000 ~ \"Mayor a cuatro millones\",\n    documento > 50000000 ~ \"Mayor a cinco millones\",\n    TRUE ~ \"Otro\"\n  )\n)\n\n# A tibble: 574 × 6\n   documento es_accionista institucion            fecha      sexo   tipo_docum…¹\n       <dbl>         <dbl> <chr>                  <date>     <chr>  <chr>       \n 1  20008549             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n 2  20172929             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n 3  20438713             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n 4  20480631             0 Medicina Personalizada 2022-02-01 Mujer  Mayor a dos…\n 5  20688953             0 Medicina Personalizada 2022-02-01 Mujer  Mayor a dos…\n 6  21431711             0 Medicina Personalizada 2022-02-01 Mujer  Mayor a dos…\n 7  21484809             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n 8  22301055             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n 9  22392659             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n10  22806233             0 Medicina Personalizada 2022-02-01 Hombre Mayor a dos…\n# … with 564 more rows, and abbreviated variable name ¹​tipo_documento\n\n\n\n\n\nCuestión frecuente en el análisis de datos es la de generar tablas agregadas. Para tales usos el tidyverse tiene dos funciones que son clave: group_by y summarise.\nGroup_by, tal como su nombre lo indica, sirve para generar agrupaciones a partir de una variable. Para utilizarla no debemos más que declarar cuál variable queremos utilizar para agrupar.\nLa función summarise, por otra parte, realiza las agregaciones que el analista requiere a partir de la agrupación declarada. Para practicar esto, volveremos a nuestro dataframe filtrado, y realizaremos una agrupación a partir de cada mutualista, mostrando la cantidad de personal para cada una.\n\npersonal_por_mutualista <- sips_filtrado %>% \n  group_by(insnom) %>% \n  summarise(cantidad = n())\n\nhead(personal_por_mutualista)\n\n# A tibble: 6 × 2\n  insnom              cantidad\n  <chr>                  <int>\n1 AMDM                    1798\n2 AMEDRIN                  400\n3 AMSJ                    1535\n4 ASOCIACION ESPAÑOLA     8076\n5 CAAMEPA                 1423\n6 CAMCEL                  1095\n\n\nCuando usamos summarise, se debe elegir el nombre de la(s) columna(s) resumen, y utilizar una función de agregación. Las más clasicas son sum(), mean(), max(), min(), etc. Si queremos saber la cantidad de registros, lo que vendría a ser un count(), podemos usar la función n().\nEl dataframe resultante nos muestra la cantidad de registros por cada elemento de la columna insnom. Pero tal como puede apreciarse, el orden de estos elementos está pautado por el orden alfabético de la columna agrupada. Podemos pedirle a R que ordene a partir de otra columna con la función arrange. Esta función ordena por defecto de forma ascendente, si le ponemos desc a la columna, ordena de la otra forma.\n\npersonal_por_mutualista <- sips_filtrado %>% \n  group_by(insnom) %>% \n  summarise(cantidad = n()) %>% \n  arrange(desc(cantidad))\n\nhead(personal_por_mutualista)\n\n# A tibble: 6 × 2\n  insnom              cantidad\n  <chr>                  <int>\n1 MEDICA URUGUAYA         8857\n2 CASMU                   8529\n3 ASOCIACION ESPAÑOLA     8076\n4 SMI                     4510\n5 CIRCULO CATOLICO        3029\n6 SEGURO AMERICANO        2670\n\n\nAhora que nuestra tabla agregada está ordenada y clara, nos resulta relevante tener la certeza de que refleja la información solicitada. Es decir, si cada registro condice con una persona. Este elemento se denomina perfil del dato y relevante tenerlo claro a la hora de realizar un análisis, ya que en otro caso podemos dar información incorrecta.\nPara asegurarnos de tener la cantidad exacta de personas por institución, debemos tener el recuento de cédulas distintas que hay, por tanto no conteo simple no nos habilita esa posibilidad. Para esto podemos usar la función n_distinct que justamente trae un conteo de los valores únicos para cada columna. A diferencia de n(), a n_distinct debemos aclararle con qué columna estamos trabajando.\n\npersonal_por_mutualista <- sips_filtrado %>% \n  group_by(insnom) %>% \n  summarise(cantidad = n_distinct(cod_persona)) %>% \n  arrange(desc(cantidad))\n\nhead(personal_por_mutualista)\n\n# A tibble: 6 × 2\n  insnom              cantidad\n  <chr>                  <int>\n1 MEDICA URUGUAYA         7119\n2 ASOCIACION ESPAÑOLA     6664\n3 CASMU                   6320\n4 SMI                     3650\n5 CIRCULO CATOLICO        2342\n6 SEGURO AMERICANO        2271\n\n\nOtro análisis que podríamos hacer es qué porcentaje del total del personal tiene cada mutualista. Para hacer esto hay que generar una columna nueva luego de hacer la agrupación, podemos usar mutate.\n\npersonal_por_mutualista <- sips_filtrado %>% \n  group_by(insnom) %>% \n  summarise(cantidad = n_distinct(cod_persona)) %>% \n  arrange(desc(cantidad)) %>% \n  mutate(porcentaje = cantidad / sum(cantidad) * 100)\n\nhead(personal_por_mutualista)\n\n# A tibble: 6 × 3\n  insnom              cantidad porcentaje\n  <chr>                  <int>      <dbl>\n1 MEDICA URUGUAYA         7119      12.3 \n2 ASOCIACION ESPAÑOLA     6664      11.6 \n3 CASMU                   6320      11.0 \n4 SMI                     3650       6.33\n5 CIRCULO CATOLICO        2342       4.06\n6 SEGURO AMERICANO        2271       3.94\n\n\nEl porcentaje funciona correctamente pero ver tantos decimales aporta poco para el análisis en este caso. Podemos redondear los elementos de las columnas utilizando la función round. Esta función tiene dos parámetros: el número o columna que debe redondear, y la cantidad de decimales que debe permitir. En este caso le pondremos 0.\n\npersonal_por_mutualista <- sips_filtrado %>% \n  group_by(insnom) %>% \n  summarise(cantidad = n_distinct(cod_persona)) %>% \n  arrange(desc(cantidad)) %>% \n  mutate(porcentaje = round(cantidad / sum(cantidad) * 100,0))\n\nhead(personal_por_mutualista)\n\n# A tibble: 6 × 3\n  insnom              cantidad porcentaje\n  <chr>                  <int>      <dbl>\n1 MEDICA URUGUAYA         7119         12\n2 ASOCIACION ESPAÑOLA     6664         12\n3 CASMU                   6320         11\n4 SMI                     3650          6\n5 CIRCULO CATOLICO        2342          4\n6 SEGURO AMERICANO        2271          4\n\n\nTambién es posible realizar agregaciones por más de una variable. Por ejemplo, sería interesante conocer la cantidad de personas por institución pero también a nivel de sexo. Para esto, debemos agrupar por institución y por sexo, y luego sumarisar.\n\npersonal_mutualista_sexo <- sips_filtrado %>% \n  group_by(insnom, sexo,) %>% \n  summarise(cantidad = n_distinct(cod_persona))\n\nhead(personal_mutualista_sexo)\n\n# A tibble: 6 × 3\n# Groups:   insnom [3]\n  insnom   sexo cantidad\n  <chr>   <dbl>    <int>\n1 AMDM        1      410\n2 AMDM        2     1207\n3 AMEDRIN     1       96\n4 AMEDRIN     2      232\n5 AMSJ        1      298\n6 AMSJ        2      787\n\n\n¿Se acuerdan cómo modificamos nuestra variable sexo a una con caracteres y no numérica? Podemos hacer todo en un solo paso para que quede más legible.\n\npersonal_mutualista_sexo <- sips_filtrado %>% \n  mutate(sexo_1 = if_else(sexo == 1, \"Hombre\", \"Mujer\")) %>% \n  group_by(insnom, sexo_1) %>% \n  summarise(cantidad = n_distinct(cod_persona))\n\nhead(personal_mutualista_sexo)\n\n# A tibble: 6 × 3\n# Groups:   insnom [3]\n  insnom  sexo_1 cantidad\n  <chr>   <chr>     <int>\n1 AMDM    Hombre      410\n2 AMDM    Mujer      1207\n3 AMEDRIN Hombre       96\n4 AMEDRIN Mujer       232\n5 AMSJ    Hombre      298\n6 AMSJ    Mujer       787\n\n\nQuizás no nos interesa verlo en términos de hombre o mujer, y solo nos interesan los hombres. Podemos incorporar un filtro previamente y eso hace el trabajo.\n\npersonal_mutualista_hombres <- sips_filtrado %>% \n  filter(sexo == 1) %>% \n  group_by(insnom) %>% \n  summarise(cantidad = n_distinct(cod_persona)) %>% \n  arrange(desc(cantidad))\n\nhead(personal_mutualista_hombres)\n\n# A tibble: 6 × 2\n  insnom              cantidad\n  <chr>                  <int>\n1 MEDICA URUGUAYA         2007\n2 ASOCIACION ESPAÑOLA     1849\n3 CASMU                   1741\n4 SMI                     1009\n5 CIRCULO CATOLICO         699\n6 SEGURO AMERICANO         698\n\n\n\n\n\n¿Y si quisiéramos ver el porcentaje de personal por sexo para cada institución?Para ese caso vamos a necesitar la función ungroup, que hace exactamente lo opuesto que el group_by, desagrega por la variable seleccionada.\n\npersonal_por_sexo <- sips_filtrado %>% \n  mutate(sexo_1 = if_else(sexo == 1, \"Hombre\", \"Mujer\")) %>% \n  group_by(insnom, sexo_1) %>% \n  summarise(cantidad = n_distinct(cod_persona)) %>% \n  group_by(insnom) %>% \n  mutate(porcentaje = round(cantidad / sum(cantidad) * 100, 0)) %>% \n  ungroup()\n\nhead(personal_por_sexo)\n\n# A tibble: 6 × 4\n  insnom  sexo_1 cantidad porcentaje\n  <chr>   <chr>     <int>      <dbl>\n1 AMDM    Hombre      410         25\n2 AMDM    Mujer      1207         75\n3 AMEDRIN Hombre       96         29\n4 AMEDRIN Mujer       232         71\n5 AMSJ    Hombre      298         27\n6 AMSJ    Mujer       787         73\n\n\nSiempre resulta conveniente ejecutar estos ejemplos linea por linea y ver qué resultado va dando, el intentar leer toda la pipeline (así se denomina a una sucesión de acciones unidas por pipes)puede ser confuso si no se está familiarizado aún con las funciones.\n\n\n\nVamos a querer hacer un análisis que requerirá de todas nuestras herramientas analíticas.\n\nDebe crearse una tabla que muestre la cantidad de personas por institución y sexo, tomando en cuenta solo los valores 1 y 2 de esta variable.\nTambién debe indicar la cantidad del personal que sea accionista de la institución, y el porcentaje.\nFinalmente, debe tener una variable que indique si la institución tiene accionistas hombres y mujeres, solo hombres, solo mujeres, o si no tiene accionistas.\n\n\n\nSolución\npersonal_accionista <- sips_filtrado %>% \n  filter(sexo == 1 | sexo == 2) %>% \n  mutate(sexo_1 = if_else(sexo == 1, \"Hombre\", \"Mujer\")) %>% \n  group_by(insnom, sexo_1) %>% \n  summarise(\n    cantidad_personas = n_distinct(cod_persona),\n    accionistas = sum(accionista)\n  ) %>% \n  mutate(tiene_accionistas_h = if_else(accionistas > 0 & sexo_1 == \"Hombre\", 1, 0),\n         tiene_accionistas_m = if_else(accionistas > 0 & sexo_1 == \"Mujer\", 1, 0)) %>% \n  group_by(insnom) %>% \n  mutate(\n    tipo_accionistas = case_when(\n      sum(tiene_accionistas_h) == 1 & sum(tiene_accionistas_m) == 1 ~ \"Tiene accionistas de ambos sexos\",\n      sum(tiene_accionistas_h) == 0 & sum(tiene_accionistas_m) == 1 ~ \"Tiene accionistas solo mujeres\",\n      sum(tiene_accionistas_h) == 1 & sum(tiene_accionistas_m) == 0 ~ \"Tiene accionistas solo hombres\",\n      sum(tiene_accionistas_h) == 0 & sum(tiene_accionistas_m) == 0 ~ \"No tiene accionistas en su personal\"\n    ),\n    porcentaje_accionistas = round(sum(accionistas) / sum(cantidad_personas) * 100, 0)\n  ) %>% \n  ungroup() %>% \n  select(-tiene_accionistas_h, -tiene_accionistas_m) %>% \n  group_by(insnom) %>% \n  summarise(\n    cantidad_personas = sum(cantidad_personas),\n    cantidad_accionistas = sum(accionistas),\n    porcentaje_accionistas = max(porcentaje_accionistas),\n    tipo_accionistas = max(tipo_accionistas)\n  )"
  },
  {
    "objectID": "chapters/data_manipulation.html",
    "href": "chapters/data_manipulation.html",
    "title": "5  Manipulación de datos",
    "section": "",
    "text": "En muchas ocasiones debemos trabajar con varias tablas de forma simultánea, y en otras debemos unificarlas para llegar a la tabla final con la que haremos el análisis. Para hacer estas uniones, debemos ya sea combinar las tablas, o anexarlas.\n\n\nAnexar dos tablas implica “poner una encima de la otra”, es decir, que las filas de una de las tablas se unan a la otra. Para alcanzar esto debemos tener dos dataframes con estructura similar, es decir que tengan la misma cantidad de variables y que éstas tengan encabezados similares.\nPara ejemplificar estos casos vamos a trabajar con una serie de tablas ficticias, que responden a los datos de un restaurant imaginario. Lo primero que importaremos son las tablas de ventas de la semana uno y la semana dos.\n\nsemana_1 <- read.csv(\"../data/Restaurant - Week 1 Sales.csv\")\nhead(semana_1)\n\n  Customer.ID Food.ID\n1         537       9\n2          97       4\n3         658       1\n4         202       2\n5         155       9\n6         213       8\n\n\n\nsemana_2 <- read.csv(\"../data/Restaurant - Week 2 Sales.csv\")\nhead(semana_2)\n\n  Customer.ID Food.ID\n1         688      10\n2         813       7\n3         495      10\n4         189       5\n5         267       3\n6         310       5\n\n\nTal como puede apreciarse, ambos dataframes tienen dos columnas que corresponden una al id de la comida y otra al id del cliente. Dado que estos dataframes comparten la misma estructura, es posible unirlos. Para hacerlo podemos usar la función rbind.\n\nventas <- rbind(semana_1, semana_2)\nhead(ventas)\n\n  Customer.ID Food.ID\n1         537       9\n2          97       4\n3         658       1\n4         202       2\n5         155       9\n6         213       8\n\n\nDe esta forma, obtenemos un dataframe de 500 filas y la misma cantidad de columnas.\n\n\n\nOtra clásica necesidad que se presenta a la hora de trabajar con muchas tablas es el tener combinarlas. Las combinaciones suceden mediante reglas de unión: a través de una determinada clave, cuando estas coinciden entre dos tablas, se pegan las columnas. Los tipos de unión son los siguientes:\n\n\n\n\n\n\nINNER JOIN: solo quedan las filas que tengan la clave en ambos dataset.\nFULL JOIN: quedan todas las filas, sin importar si matchean o no\nLEFT JOIN: las filas de la tabla de la izquierda quedan todas, se agregan las que coincidan de la derecha.\nRIGHT JOIN: las filas de la tabla de la derecha quedan todas, se agregan las que coincidan de la izquierda.\n\nTidyverse tiene funciones específicas para realizar estas uniones. Comencemos importando las tablas a combinar. La tabla de comidas tiene información sobre el id de cada comida del menú, junto con el nombre del item y su precio.\n\ncomida <- read.csv(\"../data/Restaurant - Foods.csv\")\nhead(comida)\n\n  Food.ID  Food.Item Price\n1       1      Sushi  3.99\n2       2    Burrito  9.99\n3       3       Taco  2.99\n4       4 Quesadilla  4.25\n5       5      Pizza  2.49\n6       6      Pasta 13.99\n\n\nEl objetivo será combinar esta tabla con la de ventas para tener la descripción y el precio de cada item en la tabla principal. La variable que unirá ambas tablas será Food.ID\n\nlibrary(tidyverse)\nunion <- ventas %>% inner_join(comida, by = \"Food.ID\")\nhead(union)\n\n  Customer.ID Food.ID  Food.Item Price\n1         537       9      Donut  0.99\n2          97       4 Quesadilla  4.25\n3         658       1      Sushi  3.99\n4         202       2    Burrito  9.99\n5         155       9      Donut  0.99\n6         213       8      Salad 11.25\n\n\nPara cada Food.ID, la unión trajo el resto de las columnas de la tabla de comida que coincidiera. Para el caso de los clientes tenemos un problema, y es que la columna por la cual se hará la unión no es similar en ambas tablas. Mientras que en ventas la variable se llama Costumer.ID, en clientes se llama ID. Por tanto, tengo que adaptar mi función de combinación, aclarando cómo se llama cada variable en cada tabla.\n\nclientes <- read.csv(\"../data/Restaurant - Customers.csv\")\nhead(clientes)\n\n  ID First.Name Last.Name Gender       Company                    Occupation\n1  1     Joseph   Perkins   Male       Dynazzy Community Outreach Specialist\n2  2   Jennifer   Alvarez Female          DabZ       Senior Quality Engineer\n3  3      Roger     Black   Male       Tagfeed             Account Executive\n4  4     Steven     Evans   Male          Fatz              Registered Nurse\n5  5       Judy  Morrison Female       Demivee               Legal Assistant\n6  6     Amanda    Howell Female Thoughtbridge              Dental Hygienist\n\n\nUna opción es modificar el nombre de la columna en una de las dos tablas. De otra forma, puede hacerse así:\n\nunion <- union %>% inner_join(clientes, by = c(\"Customer.ID\" = \"ID\"))\nhead(union)\n\n  Customer.ID Food.ID  Food.Item Price First.Name Last.Name Gender   Company\n1         537       9      Donut  0.99     Cheryl   Carroll Female  Zoombeat\n2          97       4 Quesadilla  4.25     Amanda   Watkins Female       Ozu\n3         658       1      Sushi  3.99    Patrick      Webb   Male Browsebug\n4         202       2    Burrito  9.99      Louis  Campbell   Male Rhynoodle\n5         155       9      Donut  0.99    Carolyn      Diaz Female  Gigazoom\n6         213       8      Salad 11.25      Keith    Foster   Male Gigashots\n                     Occupation\n1              Registered Nurse\n2           Account Coordinator\n3 Community Outreach Specialist\n4    Account Representative III\n5    Database Administrator III\n6            VP Quality Control\n\n\nDe esta forma, obtenemos la tabla final, en donde pueden realizar análisis.\n\n\n\n\nObtenga las cinco comidas que más se consumen.\nIndique qué cliente ha gastado más en el restaurant.\n¿Cuánto ha sido el gasto promedio por sexo?\n\n\n\nPosible solución\ncinco_comidas <- union %>% \n  group_by(Food.Item) %>% \n  summarise(cantidad = n()) %>% \n  arrange(desc(cantidad)) %>% \n  head(5)\n\ncliente_mas_gastador <- union %>% \n  group_by(Customer.ID, First.Name, Last.Name) %>% \n  summarise(gasto = sum(Price)) %>% \n  arrange(desc(gasto)) %>% \n  head(1)\n\ngasto_por_sexo <- union %>% \n  group_by(Gender) %>% \n  summarise(gasto_promedio = mean(Price))"
  },
  {
    "objectID": "chapters/data_manipulation.html#manejo-de-nas",
    "href": "chapters/data_manipulation.html#manejo-de-nas",
    "title": "5  Manipulación de datos",
    "section": "5.2 Manejo de NAs",
    "text": "5.2 Manejo de NAs\n\nIdentificación de datos faltantes\nLos datos faltantes son una realidad cotidiana dentro del análisis de datos. Toda estructura de información está sujeta a fallas y esto es complementado por la posible carencia de datos provenientes del provedor.\nEstos missing pueden aparecer de varias formas: celdas vacías, textos vacíos, o elementos que identifiquen que un dato es faltante, por ejemplo, un texto que diga “sin dato”.\n\ndatos <- read.csv(\"../data/extras.csv\", encoding = \"UTF-8\")\nhead(datos)\n\n  id      date                      product revenue         city product_type\n1  1 26/3/2020     Lettuce - Belgian Endive    3139        Laxey      premiun\n2  2 27/5/2020     Table Cloth 91x91 Colour    4726 Svyetlahorsk      regular\n3  3 24/6/2020                   Pur Source    3117      Cabuyao             \n4  4 10/7/2020 Syrup - Monin - Blue Curacao    2575   Nouakchott      regular\n5  5 22/7/2020               Steamers White    3136       Timrat         gold\n6  6 11/3/2020       Wine - Delicato Merlot    1939    Glinojeck         gold\n\n\nAl abrir este dataset, puede observarse con claridad que hay algunos campos que tienen valores faltantes, sin embargo, R no los identifica. Para R hay un valor faltante cuando aparece el elemento NA. Si éste no aparece, el contenido del dato tiene un valor. El problema en este caso es que los campos vacíos R no logra identificarlos como NA, hay que indicárselo.\n\ndatos <- read.csv(\n  file = \"../data/extras.csv\", \n  stringsAsFactors = TRUE, \n  encoding = \"UTF-8\", \n  na.strings = c(\"\", \"NA\")\n)\nhead(datos)\n\n  id      date                      product revenue         city product_type\n1  1 26/3/2020     Lettuce - Belgian Endive    3139        Laxey      premiun\n2  2 27/5/2020     Table Cloth 91x91 Colour    4726 Svyetlahorsk      regular\n3  3 24/6/2020                   Pur Source    3117      Cabuyao         <NA>\n4  4 10/7/2020 Syrup - Monin - Blue Curacao    2575   Nouakchott      regular\n5  5 22/7/2020               Steamers White    3136       Timrat         gold\n6  6 11/3/2020       Wine - Delicato Merlot    1939    Glinojeck         gold\n\n\nComo puede apreciarse, se agrega un parámetro denominado na.strings como forma de indicarle a R cuando un valor de caracter debe tomarse como NA. Además, se ha agregado un parámetro que le pide a R que los valores de texto los almacene como factores. Esto lo hacemos especialmente en este caso, para realizar un conteo de NAs mediante la función summary.\n\nsummary(datos)\n\n       id                date                          product   \n Min.   :   1.0   4/11/2020:  9   Danishes - Mini Raspberry:  5  \n 1st Qu.: 250.8   13/1/2021:  8   Cake - Bande Of Fruit    :  4  \n Median : 500.5   15/2/2020:  8   Beef - Tongue, Cooked    :  3  \n Mean   : 500.5   19/7/2020:  7   Beer - Upper Canada Lager:  3  \n 3rd Qu.: 750.2   29/5/2020:  7   Bouillion - Fish         :  3  \n Max.   :1000.0   (Other)  :942   (Other)                  :933  \n                  NA's     : 19   NA's                     : 49  \n    revenue             city      product_type\n Min.   :1001   Guadalupe :  3   gold   :302  \n 1st Qu.:2049   København :  3   premiun:325  \n Median :3073   Buenavista:  2   regular:321  \n Mean   :3058   Cabrobó   :  2   NA's   : 52  \n 3rd Qu.:4108   Córdoba   :  2                \n Max.   :4999   (Other)   :965                \n NA's   :23     NA's      : 23                \n\n\nDe esta forma, el summary toma los NA como otro valor dentro de las variables, y realiza un conteo. Otra forma de obtener esta información es mediante la función skim. Esta función está pensada para realizar una serie de averiguaciones en una tabla y devolver un diagnóstico de los datos muy completo. Para usarla hay que llamar al paquete skimr\n\nlibrary(skimr)\nskim(datos)\n\n\nData summary\n\n\nName\ndatos\n\n\nNumber of rows\n1000\n\n\nNumber of columns\n6\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n4\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\ndate\n19\n0.98\nFALSE\n341\n4/1: 9, 13/: 8, 15/: 8, 19/: 7\n\n\nproduct\n49\n0.95\nFALSE\n786\nDan: 5, Cak: 4, Bee: 3, Bee: 3\n\n\ncity\n23\n0.98\nFALSE\n954\nGua: 3, Køb: 3, Bue: 2, Cab: 2\n\n\nproduct_type\n52\n0.95\nFALSE\n3\npre: 325, reg: 321, gol: 302\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nid\n0\n1.00\n500.50\n288.82\n1\n250.75\n500.5\n750.25\n1000\n▇▇▇▇▇\n\n\nrevenue\n23\n0.98\n3058.06\n1185.29\n1001\n2049.00\n3073.0\n4108.00\n4999\n▇▆▆▇▇\n\n\n\n\n\n\n\nManejo de datos daltantes\nLuego de identificar los valores faltantes de nuestro dataframe, la decisión siguiente a tomar es qué hacer con ellos. Hay varias posibilidades\n\nEliminar los valores faltantes\nReemplazar las variables numéricas con:\n\nLa media, mediana, o algún valor estadístico\nPor ceros\n\nReemplazar las variables categóricas con:\n\nEl valor más frecuente\nOtro valor (por ejemplo: “Otro”)\n\n\n\nEliminar valores faltantes\nSi decidimos eliminar los valores faltantes, podemos usar la función drop_na, del paquete tidyverse, que elimina la fila entera en donde encuentra un NA.\n\nlibrary(tidyverse)\ndatos %>% drop_na() %>% head()\n\n  id      date                      product revenue         city product_type\n1  1 26/3/2020     Lettuce - Belgian Endive    3139        Laxey      premiun\n2  2 27/5/2020     Table Cloth 91x91 Colour    4726 Svyetlahorsk      regular\n3  4 10/7/2020 Syrup - Monin - Blue Curacao    2575   Nouakchott      regular\n4  5 22/7/2020               Steamers White    3136       Timrat         gold\n5  6 11/3/2020       Wine - Delicato Merlot    1939    Glinojeck         gold\n6  7  1/6/2020  Island Oasis - Magarita Mix    2283  Châteauroux         gold\n\n\nEsta función resulta bastante flexible y permite varios tratamientos de NA. Por ejemplo, si quisiéramos eliminar NA de alguinas columnas en particular, podemos aclarárselo.\n\ndatos %>% drop_na(any_of(c(\"date\", \"product\"))) %>% head()\n\n  id      date                      product revenue         city product_type\n1  1 26/3/2020     Lettuce - Belgian Endive    3139        Laxey      premiun\n2  2 27/5/2020     Table Cloth 91x91 Colour    4726 Svyetlahorsk      regular\n3  3 24/6/2020                   Pur Source    3117      Cabuyao         <NA>\n4  4 10/7/2020 Syrup - Monin - Blue Curacao    2575   Nouakchott      regular\n5  5 22/7/2020               Steamers White    3136       Timrat         gold\n6  6 11/3/2020       Wine - Delicato Merlot    1939    Glinojeck         gold\n\n\n\n\nReemplazar variables numéricas y categóricas\nOtras veces necesitamos no eliminar, sino reemplazar los valores faltantes por un valor que resulte conveniente.\n\nLa decisión sobre este procedimiento debe ser acorde al contenido conceptual del dataset y no hay una solución única para todas las ocasiones.\n\nSi queremos generar un reemplazo de NAs por un valor calculado, digamos, la media de esa variable, podemos guardar dicho valor en un objeto y luego imputarlo con la función replace_na. Dicha función debe recibir una lista que indique qué imputar a cada variable. Si queremos hacerlo con una sola, se especifica la variable, sino, se van agregando con comas.\n\nmean_revenue <- round(mean(datos$revenue, na.rm = TRUE),0)\ndatos %>% replace_na(list(revenue = mean_revenue)) %>% head()\n\n  id      date                      product revenue         city product_type\n1  1 26/3/2020     Lettuce - Belgian Endive    3139        Laxey      premiun\n2  2 27/5/2020     Table Cloth 91x91 Colour    4726 Svyetlahorsk      regular\n3  3 24/6/2020                   Pur Source    3117      Cabuyao         <NA>\n4  4 10/7/2020 Syrup - Monin - Blue Curacao    2575   Nouakchott      regular\n5  5 22/7/2020               Steamers White    3136       Timrat         gold\n6  6 11/3/2020       Wine - Delicato Merlot    1939    Glinojeck         gold\n\n\nSi quisiéramos reemplazar todos los NAs de los datos numéricos por un 0, realmente específicar este valor para cada variable puede resultar tedioso. Por tanto, podemos usar un método para modificar todas las columnas numéricas de una vez, tal como se explica en los comentarios del siguiente código.\nPasos:\n\nSelecciono la tabla con que voy a trabajar\nEsta función es como “select” pero con condiciones. En este caso le pido que se quede con las columnas solo si son numéricas.\nUso la función replace y no replace_na, ya que la segunda siempre recibe una lista, y ésta es más directa. Tengo que indicarle una condición y luego el valor con qué reemplazar.\nFinalmente, vuelvo a pegarle las variables que le quité. Puedo usar select_if nuevamente pero esta vez con la condición negativa.\n\n\ndatos %>% # Paso 1\n  select_if(is.numeric) %>% # Paso 2\n  replace(is.na(.),0) %>% # Paso 3\n  cbind(select_if(datos, negate(is.numeric))) %>% # Paso 4\n  filter(id == 31)\n\n  id revenue      date               product city product_type\n1 31       0 18/8/2020 Cheese - Gouda Smoked <NA>         gold\n\n\nEsto podemos aplicarlo con las variables categóricas también, por ejemplo, si queremos que los NAs sean “sin dato” o de algún valor que nos interese. Para esto vamos a necesitar un paquete para el tratamiento de valores de factores, llamada forcats. Este paquete tiene una función dedicada expresamente para sustituir los NAs por otro valor, el truco es reemplazar las variable existente con la nueva generada a través de mutate. Si en vez de factores, trabajáramos con caracteres, la función replace debería ser suficiente.\n\nlibrary(forcats)\ndatos %>% \n  mutate(\n  date = fct_explicit_na(date, \"1/1/1900\"),\n  product = fct_explicit_na(product, \"sinDato\"),\n  city = fct_explicit_na(city, \"Otro\"),\n  product_type = fct_explicit_na(product_type, \"Otro\") ) %>% \n  head()\n\n  id      date                      product revenue         city product_type\n1  1 26/3/2020     Lettuce - Belgian Endive    3139        Laxey      premiun\n2  2 27/5/2020     Table Cloth 91x91 Colour    4726 Svyetlahorsk      regular\n3  3 24/6/2020                   Pur Source    3117      Cabuyao         Otro\n4  4 10/7/2020 Syrup - Monin - Blue Curacao    2575   Nouakchott      regular\n5  5 22/7/2020               Steamers White    3136       Timrat         gold\n6  6 11/3/2020       Wine - Delicato Merlot    1939    Glinojeck         gold"
  },
  {
    "objectID": "chapters/data_manipulation.html#manejo-de-duplicados",
    "href": "chapters/data_manipulation.html#manejo-de-duplicados",
    "title": "5  Manipulación de datos",
    "section": "5.3 Manejo de duplicados",
    "text": "5.3 Manejo de duplicados\nLos duplicados también suelen ser vistos como errores en los datos, pero tal como se aclara en la cita de más arriba, debe tenerse en cuenta el contenido conceptual de cada dataset para dirimir qué hacer con estos casos.\nLos duplicados pueden no serlo de forma absoluta, puede ocurrir que haya duplicados parciales, es decir que se encuentren una serie de variables con el mismo elemento pero en otras no. Dependerá de cada caso si se eliminan, agrupan, o dejan tal cual están.\nPara quedarnos con los valores únicos de un dataset, debemos usar la función distinct. A esta función se le indica a partir de cuáles variables debe buscar que haya combinaciones únicas. Si no se le presentan argumentos, considera a todas las variables.\n\ndatos %>% \n  nrow(.)\n\n[1] 1000\n\ndatos %>% \n  distinct() %>% \n  nrow(.)\n\n[1] 1000\n\n\nAmbos resultados dan mil casos, por tanto, se puede concluir que el dataset no tiene duplicados si tomamos en cuenta todas sus variables. Pero si se toman algunas esto empieza a ocurrir.\nComo puede apreciarse en los cuadros inferiores, si nos quedamos con menos variables, el distinct nos devuelve la cantidad de combinaciones únicas de éstas. También vemos que el uso del distinct indicándole cuáles variable son de interés, nos hace llegar al mismo objetivo.\n\ndatos %>%\n  select(city, product_type) %>% \n  nrow(.)\n\n[1] 1000\n\ndatos %>% \n  select(city, product_type) %>% \n  distinct() %>% \n  nrow(.)\n\n[1] 969\n\ndatos %>% \n  distinct(city, product_type) %>% \n  nrow(.)\n\n[1] 969\n\n\nPor defecto al indicarle cuáles variables nos interesa obtener los valores únicos, el distinct elimina el resto, pero podemos evitar esto si le agregamos el parámetro keep_all. Debe tenerse presente que distinct solo se quedará con el primer registro. Si nuestra intención es que esto sea diferente, debemos ordenar el dataframe de la forma en que elimine los registros que nosotros querramos.\n\ndatos %>% \n  distinct(city, product_type) %>% \n  head()\n\n          city product_type\n1        Laxey      premiun\n2 Svyetlahorsk      regular\n3      Cabuyao         <NA>\n4   Nouakchott      regular\n5       Timrat         gold\n6    Glinojeck         gold\n\ndatos %>% \n  distinct(city, product_type, .keep_all = TRUE) %>% \n  head()\n\n  id      date                      product revenue         city product_type\n1  1 26/3/2020     Lettuce - Belgian Endive    3139        Laxey      premiun\n2  2 27/5/2020     Table Cloth 91x91 Colour    4726 Svyetlahorsk      regular\n3  3 24/6/2020                   Pur Source    3117      Cabuyao         <NA>\n4  4 10/7/2020 Syrup - Monin - Blue Curacao    2575   Nouakchott      regular\n5  5 22/7/2020               Steamers White    3136       Timrat         gold\n6  6 11/3/2020       Wine - Delicato Merlot    1939    Glinojeck         gold"
  },
  {
    "objectID": "chapters/data_manipulation.html#manejo-de-fechas",
    "href": "chapters/data_manipulation.html#manejo-de-fechas",
    "title": "5  Manipulación de datos",
    "section": "5.4 Manejo de fechas",
    "text": "5.4 Manejo de fechas\n\nTipo de dato fecha\nAsí como los factores y los caracteres tienen sus particularidades, suelen dar menos problemas que las fechas, las cuales están condicionadas por formatos. Para manejar este tipo de dato, el paquete más usado se llama lubridate.\nMuchas veces R interpreta las fechas como textos en la medida que el formato no es el mismo que el estandarizado (AAAA-MM-DD). Cuando esto ocurre, debemos transformar la variable con, por ejemplo, una función de lubridate que transforma una variable en fecha, asignándole a cada valor de la fecha el del orden de la función.\nEn este caso usaremos dmy ya que en nuestra variable el formato es DD/MM/YYYY. Si fuera, por ejemplo, MM-DD-AAAA, podríamos usar mdy (no es relevante el simbolo que separe a los elementos de la fecha). Hay también funciones que contienen horas, minutos y segundos.\n\nlibrary(lubridate)\ndatos %>% str(.)\n\n'data.frame':   1000 obs. of  6 variables:\n $ id          : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date        : Factor w/ 341 levels \"1/1/2021\",\"1/10/2020\",..: 210 223 190 21 169 29 9 79 279 142 ...\n $ product     : Factor w/ 786 levels \"Alize Red Passion\",..: 360 654 526 648 631 733 328 369 420 358 ...\n $ revenue     : int  3139 4726 3117 2575 3136 1939 2283 1444 2158 3853 ...\n $ city        : Factor w/ 954 levels \"‘Uzeir\",\"Agbani\",..: 445 769 107 554 800 258 141 453 327 525 ...\n $ product_type: Factor w/ 3 levels \"gold\",\"premiun\",..: 2 3 NA 3 1 1 1 2 1 1 ...\n\ndatos %>% \n  mutate(date = dmy(date)) %>% \n  str(.)\n\n'data.frame':   1000 obs. of  6 variables:\n $ id          : int  1 2 3 4 5 6 7 8 9 10 ...\n $ date        : Date, format: \"2020-03-26\" \"2020-05-27\" ...\n $ product     : Factor w/ 786 levels \"Alize Red Passion\",..: 360 654 526 648 631 733 328 369 420 358 ...\n $ revenue     : int  3139 4726 3117 2575 3136 1939 2283 1444 2158 3853 ...\n $ city        : Factor w/ 954 levels \"‘Uzeir\",\"Agbani\",..: 445 769 107 554 800 258 141 453 327 525 ...\n $ product_type: Factor w/ 3 levels \"gold\",\"premiun\",..: 2 3 NA 3 1 1 1 2 1 1 ...\n\n\n\n\nGeneración de variables de fechas\nTambién podemos generar variables a partir de fechas, por ejemplo podemos obtener el año, mes y día de la semana a partir de una fecha dada. También, podemos imputar una fecha en específico, por ejemplo, la de hoy.\n\ndatos %>% \n  mutate(date = dmy(date)) %>% \n  mutate(\n    anio = year(date),\n    mes = month(date),\n    dia_semana = wday(date, label = TRUE),\n    hoy = today()\n  ) %>% \n  head()\n\n  id       date                      product revenue         city product_type\n1  1 2020-03-26     Lettuce - Belgian Endive    3139        Laxey      premiun\n2  2 2020-05-27     Table Cloth 91x91 Colour    4726 Svyetlahorsk      regular\n3  3 2020-06-24                   Pur Source    3117      Cabuyao         <NA>\n4  4 2020-07-10 Syrup - Monin - Blue Curacao    2575   Nouakchott      regular\n5  5 2020-07-22               Steamers White    3136       Timrat         gold\n6  6 2020-03-11       Wine - Delicato Merlot    1939    Glinojeck         gold\n  anio mes dia_semana        hoy\n1 2020   3        jue 2022-10-31\n2 2020   5        mié 2022-10-31\n3 2020   6        mié 2022-10-31\n4 2020   7        vie 2022-10-31\n5 2020   7        mié 2022-10-31\n6 2020   3        mié 2022-10-31\n\n\nOtro valor que traen las fechas es la generación de variables calculadas a partir de fechas. Es muy común querer obtener el tiempo transcurrido entre una fecha y otra. En el siguiente ejemplo se presenta cómo encontrar la diferencia en días, meses y años. Es básicamente la división entre la cantidad de días (unidad de medida de lubridate) por el segmentador que nos interesa. El uso de los % es para que redondee.\n\ndatos %>% \n  select(id, date) %>% \n  mutate(date = dmy(date), hoy = today()) %>%\n  mutate(\n    anios_dif = interval(date, hoy) %/% years(1),\n    meses_dif = interval(date, hoy) %/% months(1),\n    dias_dif = interval(date, hoy) %/% days(1),\n    un_anio_mas = date + years(1),\n    un_mes_mas = date + months(1),\n    un_dia_mas = date + 1\n  ) %>% \n  head()\n\n  id       date        hoy anios_dif meses_dif dias_dif un_anio_mas un_mes_mas\n1  1 2020-03-26 2022-10-31         2        31      949  2021-03-26 2020-04-26\n2  2 2020-05-27 2022-10-31         2        29      887  2021-05-27 2020-06-27\n3  3 2020-06-24 2022-10-31         2        28      859  2021-06-24 2020-07-24\n4  4 2020-07-10 2022-10-31         2        27      843  2021-07-10 2020-08-10\n5  5 2020-07-22 2022-10-31         2        27      831  2021-07-22 2020-08-22\n6  6 2020-03-11 2022-10-31         2        31      964  2021-03-11 2020-04-11\n  un_dia_mas\n1 2020-03-27\n2 2020-05-28\n3 2020-06-25\n4 2020-07-11\n5 2020-07-23\n6 2020-03-12"
  },
  {
    "objectID": "chapters/data_manipulation.html#desafío-1",
    "href": "chapters/data_manipulation.html#desafío-1",
    "title": "5  Manipulación de datos",
    "section": "5.5 Desafío",
    "text": "5.5 Desafío\n\nGenere una tabla que muestre el total de productos vendidos, y el total revenue por año y mes. Elimine los casos en donde haya valores faltantes.\n¿Cuáles han sido, para cada año, los cinco productos menos vendidos? ¿Y los menos rentables?\n\n¿Cuántos días han pasado desde que se vendieron estos productos con respecto a la última fecha registrada?\n\nInvestigue si se vende más caro en la primera mitad del año o en la segunda, averiguando el promedio de venta por unidad. Convierta los valores faltantes del mes en enero.\n\n\n\nPosible solución\n# Ejercicio 1\n\ndatos %>% \n  mutate(date = dmy(date)) %>% \n  mutate(anio = year(date), mes = month(date)) %>% \n  drop_na(any_of(c(\"anio\", \"mes\"))) %>% \n  group_by(anio, mes) %>% \n  summarise(cantidad = n(), total_ingreso = sum(revenue, na.rm = TRUE))\n\n# Ejercico 2\n\ndatos %>% \n  mutate(date = dmy(date)) %>% \n  mutate(anio = year(date)) %>% \n  drop_na(any_of(c(\"anio\", \"product\"))) %>% \n  group_by(anio, product) %>% \n  summarise(cantidad = n(), total_ingreso = sum(revenue, na.rm = TRUE)) %>%   arrange(cantidad) %>% \n  head(5)\n\ndatos %>% \n  mutate(date = dmy(date)) %>% \n  mutate(anio = year(date)) %>% \n  drop_na(any_of(c(\"anio\", \"product\"))) %>% \n  group_by(anio, product) %>% \n  summarise(cantidad = n(), total_ingreso = sum(revenue, na.rm = TRUE)) %>%   arrange(total_ingreso) %>% \n  head(5)\n\n# Ejercicio 2 parte b\n\ndatos %>% \n  mutate(date = dmy(date)) %>% \n  mutate(anio = year(date)) %>% \n  drop_na(any_of(c(\"anio\", \"product\"))) %>% \n  group_by(anio, product) %>% \n  summarise(cantidad = n(), total_ingreso = sum(revenue, na.rm = TRUE)) %>% \n  arrange(total_ingreso) %>% \n  head(1) %>% \n  select(product) %>% \n  left_join(datos, by = 'product') %>% \n  mutate(date = dmy(date), hoy = today()) %>% \n  arrange(desc(date)) %>% \n  mutate(dias_desde_que_se_vendio = interval(date, hoy) %/% days(1)) %>% \n  select(product, dias_desde_que_se_vendio) %>% \n  head()\n\n# Ejercicio 3\n\ndatos %>% \n  mutate(date = dmy(date)) %>% \n  mutate(mes = month(date)) %>%\n  replace_na(list(mes = 1)) %>% \n  mutate(\n    parte_del_anio = case_when(\n      mes < 7 ~ \"Primera parte\",\n      mes > 6 ~ \"Segunda parte\"\n    )\n  ) %>% \n  group_by(parte_del_anio) %>% \n  summarise(cantidad = n(), total_ingreso = sum(revenue, na.rm = TRUE)) %>%\n  mutate(promedio_venta = total_ingreso/cantidad)"
  },
  {
    "objectID": "chapters/visualization.html",
    "href": "chapters/visualization.html",
    "title": "6  Visualización de datos",
    "section": "",
    "text": "R y en particular RStudio son herramientas muy útiles para la visualización de datos. El paquete más relevante para esta cuestión es ggplot. Este paquete tiene una estructura muy particular pero clara a la hora de generar visualizaciones.\nPara visualizar esto, vamos a trabajar con el dataset implícito de R, iris.\n\niris <- iris\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nEste dataset contiene información sobre distintas flores, como la longitud y anchura de sus pétalos, sépalos y la especie. La función ggplot genera un canva en donde se despliega la gráfica. Si tan solo se llama a la función, podemos ver desplegado este espacio vacío.\n\nlibrary(ggplot2)\nlibrary(tidyverse)\niris %>% \n  ggplot()\n\n\n\n\nPara poder visualizar lo que hay dentro, debemos dentro de la función ggplot delinear el eje x e y (este último es opcional). Por ejemplo, podemos querer generar un gráfico que muestre en barras la cantidad de casos por especie. Para empezar, podemos definir el eje x con las especies.\n\niris %>% \n  ggplot(aes(x = Species))\n\n\n\n\nVemos que aparece en el eje x los distintos valores de la variable de especies, junto con el nombre de la variable como título del eje. Ahora resta agregar el tipo de gráfico que queremos mostrar. Para esto, debemos agregarle un elemento concatenado a la función ggplot, que le indica el tipo de gráfico. Por ejemplo, para un gráfico de barras, hay que agregar geom_bar.\n\niris %>% \n  ggplot(aes(x = Species)) +\n  geom_bar()\n\n\n\n\nPor defecto, el geom_bar hace un conteo de valores de cada elemento de la variable y eso es lo que grafica. En este caso, cada elemento tiene 50 casos y es por eso que los despliega iguales. A su vez, el eje refleja la métrica utilizada. Si quisiéramos editar los ejes hay que hacer otra concatenación donde se los indiquemos.\n\niris %>% \n  ggplot(aes(x = Species)) +\n  geom_bar() +\n  labs(\n    title = \"Cantidad de especies\",\n    x = \"Especies\",\n    y = \"Cantidad\"\n  )\n\n\n\n\nTambién pueden agregarse otros elementos estéticos al gráfico, como las etiquetas de datos y los colores de las gráficas.\n\niris %>% \n  ggplot(aes(x = Species)) +\n  geom_bar(fill = 'lightgreen') +\n  labs(\n    title = \"Cantidad de especies\",\n    x = \"Especies\",\n    y = \"Cantidad\"\n  ) +\n  geom_text(aes(label = ..count..), stat = \"count\", vjust = -0.5)\n\n\n\n\nFinalmente, pueden seleccionarse temas dentro de ggplot que permiten una mejora visual de todos los elementos del gráfico.\n\niris %>% \n  ggplot(aes(x = Species)) +\n  geom_bar(fill = 'lightgreen') +\n  labs(\n    title = \"Cantidad de especies\",\n    x = \"Especies\",\n    y = \"Cantidad\"\n  ) +\n  geom_text(aes(label = ..count..), stat = \"count\", vjust = -0.5) +\n  theme_bw()"
  },
  {
    "objectID": "chapters/visualization.html#tipos-de-gráfico",
    "href": "chapters/visualization.html#tipos-de-gráfico",
    "title": "6  Visualización de datos",
    "section": "6.2 Tipos de gráfico",
    "text": "6.2 Tipos de gráfico\n\nDe barras horizontales\nYa vimos cómo generar un gráfico de barras clásico, pero a veces resulta conveniente tenerlas de forma horizontal. Para esto, se puede usar la función coord_flip.\n\niris %>% \n  ggplot(aes(x = Species)) +\n  geom_bar(fill = 'darkblue') +\n  labs(\n    title = \"Cantidad de especies\",\n    x = \"Especies\",\n    y = \"Cantidad\"\n  ) +\n  geom_text(aes(label = ..count..), stat = \"count\", hjust = -0.5) +\n  coord_flip() +\n  theme_bw()\n\n\n\n\nCuando queremos gráficar ciertos datos, conviene previamente armar una tabla que permita simplemente representar los resultados. Si bien ggplot puede elaborarse a partir de cálculos con el dataset entero, conviene dejarle los números dados.\n\niris %>% \n  group_by(Species) %>% \n  summarise(promedio_largo_hojas = mean(Petal.Length)) %>% \n  ggplot(aes(x = Species, y = promedio_largo_hojas)) +\n  geom_bar(stat = 'identity') +\n    labs(\n    title = \"Promedio del largo del pétalo\",\n    x = \"Especies\",\n    y = \"\"\n  ) + \n  geom_text(aes(label = promedio_largo_hojas), vjust = -0.5) +\n  theme_bw()\n\n\n\n\n\n\nBarras acumuladas\n\niris %>% \n  group_by(Species) %>% \n  summarise(\n    promedio_largo_hojas = mean(Petal.Length),\n    promedio_ancho_hojas = mean(Petal.Width)\n  ) %>% \n  gather(\"concepto\", \"valor\", 2:3) %>% \n  ggplot(aes(x= Species, y = valor, fill = concepto)) +\n  geom_bar(stat = 'identity') +\n  theme_bw()\n\n\n\n\n\niris %>% \n  group_by(Species) %>% \n  summarise(\n    promedio_largo_hojas = mean(Petal.Length),\n    promedio_ancho_hojas = mean(Petal.Width)\n  ) %>% \n  gather(\"concepto\", \"valor\", 2:3) %>% \n  ggplot(aes(x= Species, y = valor, fill = concepto)) +\n  geom_bar(stat = 'identity',position = position_dodge()) +\n  theme_bw()\n\n\n\n\nGráficos de dispersión\n\niris %>% \n  ggplot(aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +\n  geom_point() +\n  theme_bw()\n\n\n\n\n\n\nHistogramas\n\niris %>% \n  ggplot(aes(x = Sepal.Length)) +\n  geom_histogram() +\n  theme_bw()\n\n\n\n\n\n\nBoxplot\n\niris %>% \n  ggplot(aes(x = Species, y = Sepal.Length)) +\n  geom_boxplot() +\n  theme_bw()\n\n\n\n\nSi quieren conocer a fondo las cuestiones de visualización y ver más tipos de gráficos, recomiendo este libro."
  },
  {
    "objectID": "chapters/visualization.html#desafío",
    "href": "chapters/visualization.html#desafío",
    "title": "6  Visualización de datos",
    "section": "6.3 Desafío",
    "text": "6.3 Desafío\nObtenga el dataset “datos_ventas” y realice las siguientes operaciones:\n\nGenere una gráfica de barras verticales que muestre la cantidad de ventas (filas) que hubo por color de producto.\nGenere un gráfico de barras horizontales que muestre el total de ingreso por departamento.\nInvestigue cómo generar un gráfico de lineas que le permita hacer una evolución de las ganancias.\n\n\nCuidado con los NAs\nCada gráfico debe tener una temática junto con sus nombres de ejes y etiquetas.\n\n\n\nPosible solución\nlibrary(openxlsx)\nventas <- read.xlsx(\"data_ventas.xlsx\", detectDates = TRUE)\n\n# Primer ejercicio\n\nventas %>% \n  group_by(Color) %>% \n  summarise(ventas = n()) %>% \n  ggplot(aes(x = Color, y = ventas)) +\n  geom_col() +\n  labs(\n    title = \"Cantidad de ventas por color\",\n    x = \"\",\n    y = \"\"\n  ) +\n  geom_text(aes(label = ventas), vjust = -0.5) +\n  theme_bw()\n\n# Segundo ejercicio\n\nventas %>% \n  mutate(ingreso = Cantidad * Monto) %>% \n  group_by(Departamento) %>% \n  summarise(ingreso = sum(ingreso, na.rm = TRUE)) %>% \n  ggplot(aes(x = Departamento, y = ingreso)) +\n  geom_bar(stat = 'identity') +\n  labs(\n    title = \"Ingreso total por departamento\",\n    x = \"\", \n    y = \"\"\n  ) +\n  coord_flip() +\n  geom_text(aes(label = ingreso), hjust = 1.1, color = 'white') +\n  theme_bw()\n\n# Tercer ejercicio\n\nventas %>% \n  mutate(ingreso = Cantidad * Monto) %>% \n  group_by(Fecha) %>% \n  summarise(ingreso = sum(ingreso, na.rm = TRUE)) %>% \n  ggplot(aes(x = Fecha, y = ingreso)) +\n  geom_line() +\n  labs(\n    title = \"Evolución de la ganancia\",\n    x = \"\",\n    y = \"\"\n  ) +\n  theme_bw()"
  }
]